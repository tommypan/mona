{"version":3,"sources":["webpack:///webpack/bootstrap caf2a65713b425dec407","webpack:///./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/common.js","webpack:///./src/js/mona/rendering/RenderSupport.js","webpack:///./src/js/mona/debug/Status.js","webpack:///./src/js/mona/shader/Shader.js","webpack:///./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix.js","webpack:///./src/js/mona/utils/Vector2.js","webpack:///./src/js/mona/rendering/GLSeetting.js","webpack:///./src/js/mona/display/DisplayObject.js","webpack:///./src/js/mona/events/EventDefine.js","webpack:///./src/js/mona/display/DisplayContainer.js","webpack:///./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/mat3.js","webpack:///./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/mat4.js","webpack:///./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/quat.js","webpack:///./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/vec3.js","webpack:///./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/vec4.js","webpack:///./src/js/mona/utils/MathUtility.js","webpack:///./src/js/mona/input/Input.js","webpack:///./src/js/mona/postEffect/BasePostEffect.js","webpack:///./src/js/mona/mona.js","webpack:///./src/js/mona/rendering/Stage.js","webpack:///./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/mat2.js","webpack:///./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/mat2d.js","webpack:///./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/quat2.js","webpack:///./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/vec2.js","webpack:///./src/js/mona/utils/Transform.js","webpack:///./src/js/mona/input/InputEventListener.js","webpack:///./src/js/mona/utils/Bound.js","webpack:///./src/js/mona/utils/webglUtils.js","webpack:///./src/js/mona/texture/RenderTexture.js","webpack:///./src/js/mona/events/Event.js","webpack:///./src/js/mona/display/Quad.js","webpack:///./src/js/weFlyGame/framework/ResourceService.js","webpack:///./src/js/weFlyGame/logic/GameEventDefine.js","webpack:///./src/js/mona/utils/VertexData.js","webpack:///./src/js/weFlyGame/main.js","webpack:///./src/js/weFlyGame/logic/Wefly.js","webpack:///./src/js/weFlyGame/framework/LoaderService.js","webpack:///./src/js/mona/loader/Loader.js","webpack:///./src/js/mona/display/Sprite.js","webpack:///./src/js/mona/animation/MovieClip.js","webpack:///./src/js/mona/display/BatchSprite.js","webpack:///./src/js/mona/text/Text.js","webpack:///./src/js/mona/text/TextFormat.js"],"names":["RenderSupport","modelViewMatrix","mat3","create","mvStackIndex","modelViewMatrixStack","fboStack","fboStackIndex","fbo","clone","child","DisplayObject","console","log","multiply","TransformMatrix","identity","projectionMatrix","projection","GLSeetting","viewPortWidth","viewPortHeight","finalMatrix","MathUtility","convertToMat4","Status","DrawCallCount","fps","drawcall","document","getElementById","drawStatus","innerText","Math","ceil","toString","requestAnimationFrame","Shader","array","callback","callObj","canvas","gl","getContext","needWarnArray","vsFile","fsFile","initShader","warmUpNext","warmProgram","key","warmUpList","splice","length","call","obj","callBack","vs","fs","onShaderLoaded","_shaderProgram","webglUtils","InitShader","shaderProgram","loadShaderFromFile","vsContent","fsContent","fileName","onLoadedFile","request","XMLHttpRequest","onreadystatechange","readyState","status","responseText","open","send","vetextPath","fragmentPath","prepareContent","vertices","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","attributeName","fSize","offset","attribute","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","useProgram","texture","uniformName","textureIndex","notNeedFlip","pixelStorei","UNPACK_FLIP_Y_WEBGL","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","u_Sampler","getUniformLocation","uniform1i","matrix","matrixName","mvpMatrix","uniformMatrix4fv","vertextNum","drawArrays","TRIANGLE_STRIP","Vector2","x","y","z","width","height","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","viewport","defaultWidth","defaultHeight","_parent","root","_transform","Transform","localPosition","localRotation","localScale","_shader","isDirty","renderReady","_needRenderTarget","_renderTexture","RenderTexture","_customPostRender","_cacheAsBitmap","_subShaders","point","result","transformationMatrix","GetTransformMatrix2Target","translate","toArray3","invert","targetObject","transformMatrix","curentObject","parent","top","parentList","indexOf","minPoint","LocalToGlobal","maxPoint","_width","_height","Bound","bound","getBound","CheckInteractBound","cacheAsBitmap","subShaderObj","subShaderCallBack","UseProgram","SetMatrixUniform","deltaTime","_vPreRender","PreRender","CheckDirtyBitmap","RenderToTargetTexture","_vFillBuffer","_vFillUniform","AddDrawCount","i","arg","PostRender","_vPostRender","FinishRenderTargetTexture","createFramebuffer","bindFramebuffer","FRAMEBUFFER","fboTexture","createTexture","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","RGBA","UNSIGNED_BYTE","framebufferTexture2D","COLOR_ATTACHMENT0","glFBOTexture","bounds","PushFBO","PopFBO","RenderImage","value","BasePostEffect","customPostRender","isNaN","_vFillVertices","MarkasDirty","_root","InputEventListener","EventDefine","DisplayContainer","_children","Array","push","Children","PushMatrix","Render","PopMatrix","eventType","eventData","brocastEvent","target","mat4","deg","PI","Input","stage","preventPropagation","addEventListener","inputEventHandle","event","type","parentContainer","source","onRenderImage","VSHADER_SOURCE","FSHADER_SOURCE","shader","Float32Array","n","FSIZE","BYTES_PER_ELEMENT","CreateBuffer","SetAttribute","SetTexture","Draw","mona","targetFPS","FPS","Init","Stage","_lastTime","Date","_schedualID","setInterval","update","bind","clearInterval","currentTime","updateDisplayTree","RenderDisplayTree","clear","COLOR_BUFFER_BIT","ResetDrawCount","ClearMatrix","_localPosition","_localRotation","_localScale","_transformMatrix","toArray","rotate","degToRad","scale","listenerList","hasEvent","MOUSE_EVENT_CLICK","MOUSE_EVENT_DOUBLE_CLICK","MOUSE_EVENT_DOWN","MOUSE_EVENT_UP","MOUSE_EVENT_MOVE","CheckInteractPoint","handlerObj","handlerFunc","priority","aCenter","GetCenterPoint","bCenter","abs","vertShaderSource","fragShaderSource","vertShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","Event","eventID","_events","eventArr","Quad","_texture","vertextData","VertexData","SetVertextPosition","SetTextureCoords","ExpandVertextToBatch","Asset","content","assetType","lifeType","ResourceService","AssetDic","asset","assetArray","GameEventDefine","isBatch","_vertices","VERTEXT_PER_ELEMENT_COUNT","oldVertext","displayNum","perQuadVerticeLength","oldVertices","vertextID","posX","posY","index","r","g","b","a","u","v","childIndex","curVertextID","sourceDataOffset","j","window","onload","Wefly","Enemy","display","hp","RemoveSprite","deadMovie","MovieClip","GetAssets","AddChild","playSpeed","Play","setTimeout","removeDead","RemoveChild","engine","shader1","shader2","WarmupAllShaders","loadResource","LoaderService","AddLoad","Load","AddEvent","EVENT_LOAD_COMPLETE","loadcomplete","gotoInitScene","background","Sprite","game_loading","shoot_copyright","_bulletCounting","_enemyCounting","_score","_gamePause","gotoBattleScene","hero","startFocusHero","bullets","batchBulletContainer","BatchSprite","enemys","batchEnemy1Container","batchEnemy2Container","batchEnemy3Container","menuContainer","game_pause","onGamePause","AddSubShader","OnGamePauseSubShader","game_resume","onGameResume","updateID","updateLogic","focusHero","heroMove","loseFocusHero","removeEventListener","GlobalToLocal","dispose","dynamicCreateBullets","dynamicCreateEnemys","bulletsFly","enemysFly","checkBulletHit","checkDead","bullet","AddSprite","bornPoint","fakeRandomPoint","random","easyEnemyPoint","normalEnemyPoint","hardEnemyPoint","enemy","easyEnemy","normalEnemy","hardEnemy","curpositon","hitTest","remove","playDead","dead","gotoEvalateScene","gameover","scoreText","Text","LoadStruct","path","loadList","loader","Loader","EVENT_LOAD_IMAGE2D_COMPLETE","Loaded","loadStru","LoadImage2D","loadedArg","AddAsset","customParam","image","Dispatch","Image","id","src","bitmapData","makeGLTexture","onShaderInitComplete","LINEAR","bitmapDataList","_glTextureList","_playIndex","_autoPlay","_statCountDelta","sprite","CheckVertextData","ClearRestBatchVertext","AppendBatchVertices","textCtx","createElement","textFormat","TextFormat","_content","makeTextCanvas","font","textAlign","textBaseline","fillStyle","clearRect","fillText","textTex","align","baseline"],"mappings":"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,CAAd,EAAiBA,IAAG,KAAKwC,QAAL,CAAczK,MAAlC,EAA0CiI,GAA1C,EACA;AACI,aAAKwC,QAAL,CAAcxC,CAAd,EAAiBnD,IAAjB,GAAwB8E,KAAxB;AACH;AACF;;;wBAkBD;AACE,aAAO,KAAKU,SAAZ;AACD;;;;EA9DmChN,6B;;;;;;;ACLtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC,KAAK,sDAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,KAAK;AACf,UAAU,KAAK;AACf;AACA,YAAY,KAAK;AACjB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU,KAAK;AACf,UAAU,KAAK;AACf;AACA,YAAY,KAAK;AACjB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C;;AAEA;AACA,cAAc;AACd;AACA;AACO,qBAAqB;AAAA;AAAA;;AAE5B;AACA,cAAc;AACd;AACA;AACO,qBAAqB;AAAA;AAAA;;;;;;;;AC1uB5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC,KAAK,sDAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,WAAW,WAAW;AAClC;AACA;AACA;AACA;;AAEA,YAAY,WAAW,YAAY;AACnC;AACA;AACA;AACA;;AAEA,aAAa,YAAY,YAAY;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,eAAe,YAAY,YAAY;AACvC,eAAe,YAAY,YAAY;AACvC,eAAe,YAAY,aAAa;;AAExC,iBAAiB,cAAc,cAAc;AAC7C,iBAAiB,cAAc,cAAc;AAC7C,iBAAiB,cAAc,eAAe;;AAE9C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,mDAAgB,GAAG,aAAa;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,YAAY,YAAY;AACrC,aAAa,YAAY,YAAY;AACrC,aAAa,YAAY,aAAa;;AAEtC;AACA,sBAAsB,yBAAyB;AAC/C,0BAA0B,qBAAqB;AAC/C,0BAA0B,yBAAyB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;;AAEA,YAAY,mDAAgB,GAAG,aAAa;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACO;AACP,wBAAwB,sDAAmB;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB;AACO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,YAAY,KAAK;AACjB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;AACA,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,mDAAgB;AACjD,iCAAiC,mDAAgB;AACjD,iCAAiC,mDAAgB;AACjD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,iCAAiC,mDAAgB;AACjD,iCAAiC,mDAAgB;AACjD,iCAAiC,mDAAgB;AACjD,iCAAiC,mDAAgB;AACjD,iCAAiC,mDAAgB;AACjD,iCAAiC,mDAAgB;AACjD;;AAEA;AACA,cAAc;AACd;AACA;AACO,qBAAqB;AAAA;AAAA;;AAE5B;AACA,cAAc;AACd;AACA;AACO,qBAAqB;AAAA;AAAA;;;;;;;;AClrD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACN;AACA;AACA;;AAEjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC,KAAK,sDAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA,UAAU,mDAAgB;AAC1B;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mDAAgB;AACvC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA,WAAW,kDAAe;AAC1B,WAAW,kDAAe;AAC1B,WAAW,kDAAe;;AAE1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC;AACpC;AACA,sBAAsB;AACtB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,aAAa,KAAK;AAClB;AACA;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACO,cAAc,+CAAU,CAAC;AAAA;AAAA;;AAEhC;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAA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AA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC,KAAK,sDAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA,UAAU,kDAAe;AACzB,WAAW,kDAAe;AAC1B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C;;AAEA;AACA,cAAc;AACd;AACA;AACO,qBAAqB;AAAA;AAAA;;AAE5B;AACA,cAAc;AACd;AACA;AACO,qBAAqB;AAAA;AAAA;;AAE5B;AACA,cAAc;AACd;AACA;AACO,mBAAmB;AAAA;AAAA;;AAE1B;AACA,cAAc;AACd;AACA;AACO,sBAAsB;AAAA;AAAA;;AAE7B;AACA,cAAc;AACd;AACA;AACO,gCAAgC;AAAA;AAAA;;AAEvC;AACA,cAAc;AACd;AACA;AACO,mBAAmB;AAAA;AAAA;;AAE1B;AACA,cAAc;AACd;AACA;AACO,6BAA6B;AAAA;AAAA;;AAEpC;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA,mBAAmB,OAAO;AAC1B,oBAAoB,iBAAiB;AACrC;AACA,oBAAoB,iBAAiB;AACrC;;AAEA;AACA;AACA,CAAC,IAAI;AAAA;AAAA;;;;;;;;AChwBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC,KAAK,sDAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,kDAAe;AACxB,SAAS,kDAAe;AACxB;AACA,GAAG;AACH;AACA,SAAS,kDAAe;AACxB,SAAS,kDAAe;AACxB;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C;;AAEA;AACA,cAAc;AAC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;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACO,qBAAqB;AAAA;AAAA;;AAE5B;AACA,cAAc;AACd;AACA;AACO,qBAAqB;AAAA;AAAA;;;;;;;;AC9Z5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACO;AACP,gBAAgB,sDAAmB;AACnC,KAAK,sDAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP,gBAAgB,sDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP,gBAAgB,sDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C;;AAEA;AACA,cAAc;AACd;AACA;AACO,qBAAqB;AAAA;AAAA;;AAE5B;AACA,cAAc;AACd;AACA;AACO,qBAAqB;AAAA;AAAA;;;;;;;;AC/b5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACN;AACA;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACO;AACP,eAAe,sDAAmB;AAClC,KAAK,sDAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACO;AACP,eAAe,sDAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACO;AACP,eAAe,sDAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACO;AACP,eAAe,sDAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA,cAAc,gDAAW;AACzB,EAAE,qDAAgB;AAClB,cAAc,sDAAmB;AACjC,EAAE,wDAAmB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,MAAM;AAClB,YAAY,KAAK;AACjB;AACO,gBAAgB,8CAAS,CAAC;AAAA;AAAA;;AAEjC;AACA;AACA,YAAY,KAAK;AACjB,YAAY,MAAM;AAClB,YAAY,KAAK;AACjB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACO,gBAAgB,8CAAS,CAAC;AAAA;AAAA;;AAEjC;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,MAAM;AAClB,YAAY,KAAK;AACjB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,iDAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,iDAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,iDAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA,sBAAsB,mDAAgB;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACO,qBAAqB;AAAA;AAAA;;AAE5B;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACO,YAAY,6CAAQ,CAAC;AAAA;AAAA;;AAE5B;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACO,eAAe,gDAAW,CAAC;AAAA;AAAA;;AAElC;AACA,cAAc;AACd;AACA;AACO,mBAAmB;AAAA;AAAA;;AAE1B;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACO,sBAAsB,uDAAkB,CAAC;AAAA;AAAA;;AAEhD;AACA,cAAc;AACd;AACA;AACO,6BAA6B;AAAA;AAAA;;AAEpC;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mDAAgB;AAC/C,yBAAyB,mDAAgB;AACzC,yBAAyB,mDAAgB;AACzC,yBAAyB,mDAAgB;AACzC,yBAAyB,mDAAgB;AACzC,yBAAyB,mDAAgB;AACzC,yBAAyB,mDAAgB;AACzC,yBAAyB,mDAAgB;AACzC;;;;;;;;ACr1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC,KAAK,sDAAmB;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP,gBAAgB,sDAAmB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA,UAAU,kDAAe;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA,+BAA+B,mDAAgB;AAC/C,+BAA+B,mDAAgB;AAC/C;;AAEA;AACA,cAAc;AACd;AACA;AACO,mBAAmB;AAAA;AAAA;;AAE1B;AACA,cAAc;AACd;AACA;AACO,qBAAqB;AAAA;AAAA;;AAE5B;AACA,cAAc;AACd;AACA;AACO,qBAAqB;AAAA;AAAA;;AAE5B;AACA,cAAc;AACd;AACA;AACO,mBAAmB;AAAA;AAAA;;AAE1B;AACA,cAAc;AACd;AACA;AACO,sBAAsB;AAAA;AAAA;;AAE7B;AACA,cAAc;AACd;AACA;AACO,gCAAgC;AAAA;AAAA;;AAEvC;AACA,cAAc;AACd;AACA;AACO,6BAA6B;AAAA;AAAA;;AAEpC;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA,oBA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","file":"weFlyGame.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./assets/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 34);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap caf2a65713b425dec407","/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/common.js\n// module id = 0\n// module chunks = 0 1","import {GLSeetting} from \"./GLSeetting.js\";\r\nimport {MathUtility} from \"../utils/MathUtility.js\";\r\nimport {DisplayObject} from \"../display/DisplayObject.js\";\r\n\r\nexport class RenderSupport {\r\n  constructor() {\r\n  }\r\n\r\n  static Init()\r\n  {\r\n    RenderSupport.modelViewMatrix = mat3.create();\r\n    RenderSupport.mvStackIndex = 0;//因为会涉及到频繁的push，pop。每次如果重建数组比较耗时，所以用index避免重建\r\n    RenderSupport.modelViewMatrixStack = [RenderSupport.modelViewMatrix];\r\n\r\n    RenderSupport.fboStack = [false];\r\n    RenderSupport.fboStackIndex = 0;\r\n    RenderSupport.fbo = false;\r\n  }\r\n\r\n  static PushMatrix()\r\n  {\r\n    RenderSupport.mvStackIndex++;\r\n    RenderSupport.modelViewMatrix = mat3.clone(RenderSupport.modelViewMatrix);\r\n    RenderSupport.modelViewMatrixStack[RenderSupport.mvStackIndex] = RenderSupport.modelViewMatrix;\r\n  }\r\n\r\n  //计算当前节点的modelview变换矩阵\r\n  static TransformMatrix(child)\r\n  {\r\n    if((child instanceof  DisplayObject) == false)\r\n    {\r\n      console.log(\"TransformMatrix child error\");\r\n      return;\r\n    }\r\n\r\n    mat3.multiply(RenderSupport.modelViewMatrix,RenderSupport.modelViewMatrix,child.TransformMatrix);\r\n  }\r\n\r\n  static PopMatrix()\r\n  {\r\n    if(RenderSupport.mvStackIndex <= 0)\r\n    {\r\n        console.log(\"PopMatrix Index Error\");\r\n        return;\r\n    }\r\n\r\n    RenderSupport.mvStackIndex--;\r\n    RenderSupport.modelViewMatrix = RenderSupport.modelViewMatrixStack[RenderSupport.mvStackIndex];\r\n  }\r\n\r\n  static ClearMatrix()\r\n  {\r\n    RenderSupport.modelViewMatrix = [];\r\n    mat3.identity(RenderSupport.modelViewMatrix);\r\n  }\r\n\r\n  static get mvpMatrix()\r\n  {\r\n    var projectionMatrix = mat3.create();\r\n    mat3.projection(projectionMatrix,GLSeetting.viewPortWidth,GLSeetting.viewPortHeight);\r\n    var finalMatrix = mat3.create();\r\n    mat3.multiply(finalMatrix,projectionMatrix,RenderSupport.modelViewMatrix);\r\n\r\n    return MathUtility.convertToMat4(finalMatrix);\r\n  }\r\n\r\n  static PushFBO(fbo)\r\n  {\r\n    RenderSupport.fboStackIndex ++;\r\n    RenderSupport.fboStack[RenderSupport.fboStackIndex] = fbo;\r\n    RenderSupport.fbo = RenderSupport.fboStack[RenderSupport.fboStackIndex];\r\n  }\r\n\r\n  static PopFBO()\r\n  {\r\n    if(RenderSupport.fboStackIndex <= 0)\r\n    {\r\n      console.log(\"PopFBO Index Error\");\r\n      return;\r\n    }\r\n\r\n    RenderSupport.fboStackIndex--;\r\n\r\n    RenderSupport.fbo = RenderSupport.fboStack[RenderSupport.fboStackIndex]\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/rendering/RenderSupport.js","\r\nexport class Status{\r\n\r\n  static AddDrawCount()\r\n  {\r\n    Status.DrawCallCount ++;\r\n  }\r\n\r\n  static ResetDrawCount()\r\n  {\r\n    Status.DrawCallCount = 0;\r\n  }\r\n}\r\n\r\nStatus.DrawCallCount = 0;\r\nStatus.fps = 0;\r\n\r\nvar drawcall = document.getElementById(\"drawcall\");\r\nvar fps = document.getElementById(\"fps\");\r\nfunction drawStatus() {\r\n  fps.innerText = \"fps:\"+Math.ceil(Status.fps).toString();\r\n  drawcall.innerText = \"drawcall:\"+Status.DrawCallCount.toString();\r\n  requestAnimationFrame(drawStatus);\r\n}\r\n\r\nrequestAnimationFrame(drawStatus);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/debug/Status.js","import {webglUtils} from \"../utils/webglUtils.js\";\r\n\r\nexport class Shader {\r\n\r\n  static WarmupAllShaders(array,callback,callObj)\r\n  {\r\n    var canvas = document.getElementById('canvas');\r\n    //获取绘制二维上下文\r\n    Shader.gl = canvas.getContext('webgl');\r\n    if (!Shader.gl) {\r\n      console.log(\"webgl init Failed\");\r\n      return;\r\n    }\r\n\r\n    Shader.needWarnArray = array;\r\n    Shader.callback = callback;\r\n    Shader.callObj = callObj;\r\n\r\n    var vsFile = Shader.needWarnArray[0].vsFile;\r\n    var fsFile = Shader.needWarnArray[0].fsFile;\r\n    Shader.initShader(Shader.gl,vsFile,fsFile,false,Shader.warmUpNext);\r\n  }\r\n\r\n  static warmUpNext(warmProgram)\r\n  {\r\n    var key = Shader.needWarnArray[0].vsFile;\r\n    Shader.warmUpList[key] = warmProgram;\r\n\r\n\r\n    Shader.needWarnArray.splice( 0, 1 );\r\n    if (Shader.needWarnArray.length > 0)\r\n    {\r\n      var vsFile = Shader.needWarnArray[0].vsFile;\r\n      var fsFile = Shader.needWarnArray[0].fsFile;\r\n      Shader.initShader(Shader.gl,vsFile,fsFile,false,Shader.warmUpNext);\r\n    }\r\n    else\r\n    {\r\n      Shader.callback.call(Shader.callObj);\r\n    }\r\n\r\n  }\r\n\r\n  static initShader(gl, vsFile, fsFile,obj, callBack)\r\n  {\r\n    var vs = null;\r\n    var fs = null;\r\n    var onShaderLoaded = function () {\r\n      if (vs && fs)\r\n      {\r\n        if(obj)\r\n        {\r\n          obj._shaderProgram = webglUtils.InitShader(gl,vs,fs);\r\n          callBack(obj._shaderProgram);\r\n          Shader.warmUpList[vsFile] = obj._shaderProgram;\r\n        }\r\n        else\r\n        {\r\n          var shaderProgram = webglUtils.InitShader(gl,vs,fs);\r\n          callBack(shaderProgram);\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    Shader.loadShaderFromFile(vsFile,function (vsContent) {\r\n      vs = vsContent;\r\n      onShaderLoaded();\r\n    })\r\n\r\n    Shader.loadShaderFromFile(fsFile,function (fsContent) {\r\n      fs = fsContent;\r\n      onShaderLoaded();\r\n    })\r\n  }\r\n\r\n  static loadShaderFromFile(fileName,onLoadedFile)\r\n  {\r\n    var request = new XMLHttpRequest();\r\n    request.onreadystatechange = function () {\r\n      if (request.readyState == 4 && request.status == 200)\r\n      {\r\n        onLoadedFile(request.responseText);\r\n      }\r\n    }\r\n\r\n    request.open(\"GET\",fileName,true);\r\n    request.send();\r\n  }\r\n\r\n\r\n\r\n  constructor(gl,vetextPath, fragmentPath,callBack,prepareContent) {\r\n    this.gl = gl;\r\n    this._shaderProgram = false;\r\n\r\n    if(Shader.warmUpList[vetextPath])\r\n    {\r\n      this._shaderProgram = Shader.warmUpList[vetextPath];\r\n      if(callBack)\r\n      {\r\n        callBack(this._shaderProgram);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if(prepareContent)\r\n    {\r\n      this._shaderProgram = webglUtils.InitShader(gl,vetextPath,fragmentPath);\r\n      Shader.warmUpList[vetextPath] = this._shaderProgram;\r\n    }\r\n    else\r\n    {\r\n        this.vetextPath = vetextPath;\r\n        this.fragmentPath = fragmentPath;\r\n        Shader.initShader(gl, vetextPath, fragmentPath,this, callBack);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  CreateBuffer(vertices)\r\n  {\r\n    let gl = this.gl;\r\n\r\n    //创建缓冲区对象\r\n    var vertexBuffer = gl.createBuffer();\r\n\r\n    //将缓冲区对象绑定到目标\r\n    gl.bindBuffer(gl.ARRAY_BUFFER,vertexBuffer);\r\n    //向缓冲区写入数据\r\n    gl.bufferData(gl.ARRAY_BUFFER,vertices,gl.STATIC_DRAW);\r\n  }\r\n\r\n\r\n  SetAttribute(attributeName,fSize,offset)\r\n  {\r\n\r\n    let gl = this.gl;\r\n    //获取坐标点\r\n    var attribute = gl.getAttribLocation(this._shaderProgram, attributeName);\r\n    //将缓冲区对象分配给a_Position变量\r\n    // 告诉属性怎么从 positionBuffer (ARRAY_BUFFER) 中读取位置\r\n    //var size = 3;          // 每次迭代使用 3 个单位的数据\r\n    //var type = gl.FLOAT;   // 单位数据类型是32位的浮点型\r\n    //var normalize = false; // 不需要归一化数据\r\n    //var stride = 0;        // 0 = 移动距离 * 单位距离长度sizeof(type)  每次迭代跳多少距离到下一个数据\r\n    //var offset = 0;        // 从绑定缓冲的起始处开始\r\n\r\n    gl.vertexAttribPointer(attribute, 2, gl.FLOAT, false, fSize*4, fSize*offset);//shader索引，元素个数，浮点型的常量,\r\n    //连接a_Position变量与分配给它的缓冲区对象\r\n    gl.enableVertexAttribArray(attribute);\r\n  }\r\n\r\n  UseProgram()\r\n  {\r\n    this.gl.useProgram(this._shaderProgram);\r\n  }\r\n\r\n  SetTexture(texture,uniformName,textureIndex,notNeedFlip)\r\n  {\r\n    let gl = this.gl;\r\n\r\n    if(!notNeedFlip)\r\n    {\r\n      //1.对纹理图像进行Y轴反转\r\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\r\n    }\r\n    //2.开启0号纹理单元\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    //3.向target绑定纹理对象\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n\r\n    var u_Sampler = gl.getUniformLocation(this._shaderProgram,uniformName);\r\n    gl.uniform1i(u_Sampler, textureIndex);\r\n  }\r\n\r\n  SetMatrixUniform(matrix,matrixName)\r\n  {\r\n    let gl = this.gl;\r\n    var mvpMatrix = gl.getUniformLocation(this._shaderProgram,matrixName);\r\n    gl.uniformMatrix4fv(mvpMatrix, false, matrix);\r\n  }\r\n\r\n  Draw(vertextNum)\r\n  {\r\n    let gl = this.gl;\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertextNum);\r\n  }\r\n\r\n}\r\nShader.warmUpList = {};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/shader/Shader.js","import * as glMatrix from \"./gl-matrix/common.js\";\nimport * as mat2 from \"./gl-matrix/mat2.js\";\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\nimport * as mat3 from \"./gl-matrix/mat3.js\";\nimport * as mat4 from \"./gl-matrix/mat4.js\";\nimport * as quat from \"./gl-matrix/quat.js\";\nimport * as quat2 from \"./gl-matrix/quat2.js\";\nimport * as vec2 from \"./gl-matrix/vec2.js\";\nimport * as vec3 from \"./gl-matrix/vec3.js\";\nimport * as vec4 from \"./gl-matrix/vec4.js\";\n\nexport {\n  glMatrix,\n  mat2, mat2d, mat3, mat4,\n  quat, quat2,\n  vec2, vec3, vec4,\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix.js\n// module id = 4\n// module chunks = 0 1","export class Vector2 {\r\n\r\n  constructor(x,y) {\r\n    this.x = x\r\n    this.y = y;\r\n  }\r\n\r\n  toArray()\r\n  {\r\n    return [this.x,this.y];\r\n  }\r\n\r\n  toArray3(z)\r\n  {\r\n    return [this.x,this.y,z];\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/utils/Vector2.js","export class GLSeetting {\r\n\r\n  constructor(gl,width,height)\r\n  {\r\n    if(gl)\r\n    {\r\n      gl.enable(gl.BLEND);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n    }\r\n\r\n    GLSeetting.viewPortWidth = width;\r\n    GLSeetting.viewPortHeight = height;\r\n    gl.viewport(0,0,width,height);\r\n  }\r\n}\r\nGLSeetting.viewPortWidth = 0;\r\nGLSeetting.viewPortHeight = 0;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/rendering/GLSeetting.js","import {Vector2} from \"../utils/Vector2.js\";\nimport {RenderSupport} from \"../rendering/RenderSupport.js\";\nimport {Transform} from \"../utils/Transform.js\";\nimport {Status} from \"../debug/Status.js\";\nimport {InputEventListener} from \"../input/InputEventListener.js\";\nimport {Bound} from \"../utils/Bound.js\";\nimport {BasePostEffect} from \"../postEffect/BasePostEffect.js\";\nimport {RenderTexture} from \"../texture/RenderTexture.js\";\nimport {GLSeetting} from \"../rendering/GLSeetting.js\";\nimport {Shader} from \"../shader/Shader.js\";\n\n//默认中心点为左上角\n//显示列表树基类\nexport class DisplayObject extends InputEventListener{\n\n  constructor(width,height)\n  {\n    super();\n    var canvas = document.getElementById('canvas');\n    //获取绘制二维上下文\n    this.gl = canvas.getContext('webgl');\n    if (!this.gl) {\n      console.log(\"webgl init Failed\");\n      return;\n    }\n\n    this.defaultWidth = 1;\n    this.defaultHeight = 1;\n    this._parent = false; //readonly\n    this.root = false;//readonly\n    this._transform = new Transform();\n    this.localPosition = new Vector2(0,0);\n    this.localRotation = 0;\n    this.localScale = new Vector2(1,1);\n    this.width = width ? width : this.defaultWidth;\n    this.height = height ? height : this.defaultHeight;\n    this._shader = false;\n    this.isDirty = false;\n    this._shaderProgram = false;\n    this.renderReady = false;\n\n    this._needRenderTarget = false;//后处理效果支持.设置来渲染到纹理后，此节点和子节点都会统一渲染到纹理，除非跳出此树\n    this._renderTexture = new RenderTexture(false,false);\n    this._customPostRender = false;//外部传入指定后处理类\n    this._cacheAsBitmap = false;\n\n    this._subShaders = [];\n  }\n\n  //子节点坐标系的点转换到世界坐标\n  LocalToGlobal(point)\n  {\n    if((point instanceof  Vector2) == false)\n    {\n      console.log(\"DisplayObject LocalToGlobal error\");\n      return new Vector2(0,0);\n    }\n\n    if(!this.root)\n    {\n      console.log(\"DisplayObject LocalToGlobal error. not add to stage\");\n      return new Vector2(0,0);\n    }\n\n    var result = mat3.create();\n    let transformationMatrix = this.GetTransformMatrix2Target(this.root);\n    mat3.translate(result,transformationMatrix,point.toArray3(0));\n    return new Vector2(result[6],result[7]);\n  }\n\n  //世界坐标的点转换到某个子节点坐标系\n  GlobalToLocal(point)\n  {\n    if((point instanceof  Vector2) == false)\n    {\n      console.log(\"DisplayObject GlobalToLocal error\");\n      return;\n    }\n\n    if(!this.root)\n    {\n      console.log(\"DisplayObject GlobalToLocal error. not add to stage\");\n      return new Vector2(0,0);\n    }\n\n    var result = mat3.create();\n    let transformationMatrix = this.GetTransformMatrix2Target(this.root);\n    mat3.invert(transformationMatrix,transformationMatrix);\n    mat3.translate(result,transformationMatrix,point.toArray3(0));\n    return new Vector2(result[6],result[7]);\n  }\n\n  //获取当前坐标系相对于目标坐标系的转换矩阵\n  GetTransformMatrix2Target(targetObject)\n  {\n    var transformMatrix = mat3.create();\n    if((targetObject instanceof  DisplayObject) == false)\n    {\n      console.log(\"DisplayObject GetTransformMatrix2Target error\");\n      return transformMatrix;\n    }\n\n    var curentObject = this;\n\n    if(targetObject == this)\n    {\n      return mat3.identity(transformMatrix);\n    }else if(targetObject == this.parent)\n    {\n      return this.TransformMatrix;\n    }else if(targetObject == this.root || targetObject == this.top)\n    {\n      curentObject = this;\n      let top = this.top;\n      while (curentObject.parent != top)\n      {\n        mat3.multiply(transformMatrix,curentObject.TransformMatrix,transformMatrix);\n        curentObject = curentObject.parent;\n      }\n      mat3.multiply(transformMatrix,curentObject.TransformMatrix,transformMatrix);\n      return transformMatrix;\n    }\n\n    //如果是渲染树当中的某个节点\n    var parentList = [];\n    curentObject = this;\n    while (curentObject.parent)\n    {\n      parentList[parentList.length] = curentObject.parent;\n      curentObject = this.parent;\n    }\n    if(parentList.indexOf(targetObject) == -1)\n    {\n      console.log(\"DisplayObject GetTransformMatrix2Target error. this not connect to target\");\n      return mat3.identity(transformMatrix);\n    }\n\n\n    curentObject = this;\n    while (curentObject != targetObject)\n    {\n      mat3.multiply(transformMatrix,transformMatrix,this.TransformMatrix);\n      curentObject = this.parent;\n    }\n\n    return transformMatrix;\n  }\n\n  getBound()\n  {\n      let minPoint = this.LocalToGlobal(new Vector2(0,0));\n      let maxPoint = this.LocalToGlobal(new Vector2(this._width,this._height));\n\n      //这里后面优化，不用每次都实例化一个bound\n      return new Bound(minPoint.x,minPoint.y,maxPoint.x-minPoint.x,maxPoint.y-minPoint.y);\n  }\n\n  hitTest(bound)\n  {\n    if((bound instanceof  Bound) == false)\n    {\n      console.log(\"DisplayObject hitTest error\");\n      return;\n    }\n\n    return this.getBound().CheckInteractBound(bound);\n  }\n\n  checkVisibleAndAlpha()\n  {\n    return true;\n  }\n\n  set customPostRender(value)\n  {\n    if(value instanceof  BasePostEffect)\n    {\n      this._customPostRender = value;\n      this._needRenderTarget = true;\n    }else\n    {\n      this._customPostRender = false;\n      this._needRenderTarget = false;\n    }\n  }\n\n  /**\n   * 缓存为位图，可以通过此技术，可以将此节点和其子节点缓存为位图，节约drawcall\n   * 需要注意的是，这里会增大内存，这里尽量对不容易变化的节点设置，否则得不偿失\n   */\n  set cacheAsBitmap(value)\n  {\n\n    if(value && typeof (this._customPostRender) != \"BasePostEffect\")\n    {\n      this.customPostRender = new BasePostEffect();\n    }\n    else\n    {\n      this.customPostRender = false;\n    }\n    this._cacheAsBitmap = value;\n  }\n\n  get cacheAsBitmap()\n  {\n    return this._cacheAsBitmap;\n  }\n\n  /**\n   * 此渲染树的跟.不一定是stage\n   * @returns {DisplayObject}\n   */\n  get top()\n  {\n    var result = this;\n    while (result.parent)\n    {\n      result = result.parent;\n    }\n    return result;\n  }\n\n  get width() {\n    return this._width;\n  }\n  set width(value) {\n    if(isNaN(value))\n    {\n      console.log(\"DisplayObject set width error\");\n      return;\n    }\n    this._width = value;\n    this._vFillVertices();\n    this.MarkasDirty();\n  }\n\n  get height() {\n    return this._height;\n  }\n  set height(value) {\n    if(isNaN(value))\n    {\n      console.log(\"DisplayObject set height error\");\n      return;\n    }\n    this._height = value;\n    this._vFillVertices();\n    this.MarkasDirty();\n  }\n\n  get parent() {\n    return this._parent;\n  }\n\n  get root() {\n    return this._root;\n  }\n\n  set root(value)\n  {\n    this._root = value;\n    this.MarkasDirty();\n  }\n  get TransformMatrix()\n  {\n    return this._transform.transformMatrix;\n  }\n\n  get localPosition() {\n    return this._transform.localPosition;\n  }\n  set localPosition(value) {\n    if((value instanceof  Vector2) == false)\n    {\n      console.log(\"DisplayObject set localPosition error\");\n      return;\n    }\n    this._transform.localPosition = value;\n    this.MarkasDirty();\n  }\n\n  get localRotation() {\n    return this._transform.localRotation;\n  }\n  set localRotation(value) {\n    if(isNaN(value))\n    {\n      console.log(\"DisplayObject set localRotation error\");\n      return;\n    }\n    this._transform.localRotation = value;\n    this.MarkasDirty();\n  }\n\n  get localScale() {\n    return this._transform.localScale;\n  }\n  set localScale(value) {\n    if((value instanceof  Vector2) == false)\n    {\n      console.log(\"DisplayObject set localScale error\");\n      return;\n    }\n    this._transform.localScale = value;\n    this.MarkasDirty();\n  }\n\n\n  MarkasDirty()\n  {\n    this.isDirty = true;\n  }\n\n  CheckDirtyBitmap()\n  {\n    if(this.cacheAsBitmap && !this.isDirty)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * 添加subshader，用于合成一些特殊效果\n   * @param subShaderObj\n   * @param subShaderCallBack\n   * @constructor\n   */\n  AddSubShader(subShaderObj,subShaderCallBack)\n  {\n    if(this._subShaders.indexOf(subShaderCallBack) != -1)\n    {\n      return;\n    }\n\n    this._subShaders[this._subShaders.length] = subShaderObj;\n    this._subShaders[this._subShaders.length] = subShaderCallBack;\n  }\n\n  /**\n   * 移除subshader，用于合成一些特殊效果\n   * @param subShaderObj\n   * @param subShaderCallBack\n   * @constructor\n   */\n  RemoveShader(subShaderObj,subShaderCallBack)\n  {\n\n    if(this._subShaders.indexOf(subShaderCallBack) == -1)\n    {\n      return;\n    }\n\n    this._subShaders.splice( this._subShaders.indexOf( subShaderObj )-1, 2 );\n  }\n\n  //vitual private\n  //模型的顶点数据\n  _vFillVertices ()\n  {\n  }\n\n  //vitual private\n  //当顶点或者纹理(attribute)等需要重建时\n  _vFillBuffer()\n  {\n\n  }\n\n  //vitual private\n  //unifonm参数发生变化\n  _vFillUniform()\n  {\n    if(!this._shaderProgram)\n    {\n      return;\n    }\n\n    this._shader.UseProgram();\n\n    this._shader.SetMatrixUniform(RenderSupport.mvpMatrix,\"mvpMatrix\");\n  }\n\n  PreRender(deltaTime)\n  {\n    this._vPreRender(deltaTime);\n  }\n\n  _vPreRender(deltaTime)\n  {\n\n  }\n\n  Render(deltaTime)\n  {\n\n    this.PreRender(deltaTime);\n\n    if (this.CheckDirtyBitmap())\n    {\n      this.RenderToTargetTexture();\n\n      this._vFillBuffer();\n\n      this._vFillUniform();\n\n      Status.AddDrawCount();\n\n      for (let i = 0; i < this._subShaders.length;i = i+2)\n      {\n        var arg = {\"gl\":this.gl};\n        this._subShaders[i+1].call(this._subShaders[i],arg);\n        Status.AddDrawCount();\n      }\n    }\n\n    this.PostRender(deltaTime);\n  }\n\n  PostRender(deltaTime)\n  {\n    this._vPostRender(deltaTime);\n    this.isDirty = false;\n  }\n\n  _vPostRender(deltaTime)\n  {\n    this.FinishRenderTargetTexture();\n  }\n\n  RenderToTargetTexture()\n  {\n    if(!this._needRenderTarget)\n    {\n      return;\n    }\n\n    let gl = this.gl;\n\n    var bound = new Bound(this.localPosition.x,this.localPosition.y,this.width,this.height);\n\n    //创建帧缓冲区对象\n    var fbo = gl.createFramebuffer();\n    //创建渲染缓冲区对象\n    //var renderbuffer = gl.createRenderbuffer();\n    //绑定帧缓冲区\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    //绑定渲染缓冲区\n    //gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\n    //初始化渲染缓冲区，这里只指定了模板缓冲区，没有指定深度缓冲区\n    //如果需要深度缓冲区，第二参数可改为 DEPTH_STENCIL,同时 framebufferRenderbuffer 的第二个参数为 DEPTH_STENCIL_ATTACHMENT\n    //gl.renderbufferStorage(gl.RENDERBUFFER, gl.STENCIL_INDEX8, bound.width, bound.height);\n    //gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER,renderbuffer);\n\n    //创建帧缓冲纹理\n    var fboTexture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, fboTexture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA,GLSeetting.viewPortWidth , GLSeetting.viewPortHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    //附着帧缓冲区的颜色缓冲区\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fboTexture, 0);\n\n    this._renderTexture.glFBOTexture = fboTexture;\n    this._renderTexture.bounds = bound;\n\n    if(!this.cacheAsBitmap)\n    {\n      RenderSupport.PushFBO(fbo);\n    }\n  }\n\n  FinishRenderTargetTexture()\n  {\n    if(this._needRenderTarget)\n    {\n      if(!this.cacheAsBitmap)\n      {\n        RenderSupport.PopFBO();\n      }\n\n      if(RenderSupport.fbo)\n      {\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, RenderSupport.fbo);\n      }else{\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n      }\n      this._customPostRender.RenderImage(this.parent,this._renderTexture);\n\n      //不cache就清除\n      if(!this.cacheAsBitmap)\n      {\n        this._renderTexture.glFBOTexture = false;\n        this._renderTexture.bounds = false;\n      }\n    }\n  }\n }\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/display/DisplayObject.js","\r\nexport class EventDefine {\r\n  static get EVENT_LOAD_IMAGE2D_COMPLETE()\r\n  {\r\n    return \"loadImage2DComplete\";\r\n  }\r\n\r\n  static get EVENT_ADD_TO_STAGE()\r\n  {\r\n    return \"addToStage\";\r\n  }\r\n\r\n  //鼠标和键盘监听 start\r\n  static get MOUSE_EVENT_CLICK()\r\n  {\r\n    return \"click\";\r\n  }\r\n\r\n  static  get MOUSE_EVENT_DOWN()\r\n  {\r\n    return \"mousedown\";\r\n  }\r\n\r\n  static get MOUSE_EVENT_UP()\r\n  {\r\n    return \"mouseup\";\r\n  }\r\n\r\n  static get MOUSE_EVENT_DOUBLE_CLICK()\r\n  {\r\n    return \"dblclick\";\r\n  }\r\n\r\n  static get MOUSE_EVENT_MOVE()\r\n  {\r\n    return \"mousemove\";\r\n  }\r\n\r\n  static get KEYBOARD_EVENT_DOWN()\r\n  {\r\n    return \"keydown\";\r\n  }\r\n\r\n  static get KEYBOARD_EVENT_UP()\r\n  {\r\n    return \"keyup\";\r\n  }\r\n  //鼠标和键盘监听 end\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/events/EventDefine.js","import {DisplayObject} from \"./DisplayObject.js\";\r\nimport {RenderSupport} from \"../rendering/RenderSupport.js\";\r\n\r\n\r\n//有容器功能，下面都可以有子节点\r\nexport class DisplayContainer extends DisplayObject\r\n{\r\n\r\n  constructor(width,height)\r\n  {\r\n    super(width,height);\r\n    this._children = new Array();\r\n    this.renderReady = true;\r\n  }\r\n\r\n  AddChild(child)\r\n  {\r\n    if((child instanceof  DisplayObject) == false)\r\n    {\r\n      console.log(\"DisplayObject AddChild error\");\r\n      return;\r\n    }\r\n\r\n    child._parent = this;\r\n    this._children.push(child);\r\n    this.root = this.root;\r\n    child._vFillVertices();\r\n    this.MarkasDirty();\r\n  }\r\n\r\n  get root() {\r\n    return this._root;\r\n  }\r\n\r\n  set root(value)\r\n  {\r\n    this._root = value;\r\n\r\n    if(!this.Children)\r\n    {\r\n      return;\r\n    }\r\n\r\n    for ( let i = 0; i <this.Children.length; i++)\r\n    {\r\n        this.Children[i].root = value;\r\n    }\r\n  }\r\n\r\n  RemoveChild(child)\r\n  {\r\n    if((child instanceof  DisplayObject) == false)\r\n    {\r\n      console.log(\"DisplayObject RemoveChild error\");\r\n      return;\r\n    }\r\n\r\n    this.MarkasDirty();\r\n    child._parent = false;\r\n    child.root = false;\r\n    this._children.splice( this._children.indexOf( child ), 1 );\r\n  }\r\n\r\n\r\n  get Children()\r\n  {\r\n    return this._children;\r\n  }\r\n\r\n  Render(deltaTime)\r\n  {\r\n    if (this.CheckDirtyBitmap())\r\n    {\r\n      this.RenderToTargetTexture();\r\n\r\n      for ( let i = 0; i <this.Children.length; i++)\r\n      {\r\n        if(this.Children[i].renderReady)\r\n        {\r\n          RenderSupport.PushMatrix();\r\n          RenderSupport.TransformMatrix(this.Children[i]);\r\n          this.Children[i].Render(deltaTime);\r\n          RenderSupport.PopMatrix();\r\n        }\r\n      }\r\n    }\r\n\r\n    this.isDirty = false;\r\n    this.FinishRenderTargetTexture();\r\n  }\r\n\r\n  //事件从渲染树子节点向跟节点冒泡\r\n  brocastEvent(eventType,eventData)\r\n  {\r\n    for ( let i = 0; i <this.Children.length; i++)\r\n    {\r\n      if(this.Children[i].renderReady)\r\n      {\r\n        this.Children[i].brocastEvent(eventType,eventData);\r\n      }\r\n    }\r\n\r\n    super.brocastEvent(eventType,eventData);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/display/DisplayContainer.js","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/mat3.js\n// module id = 10\n// module chunks = 0 1","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2), nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = (2 * far * near) * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/mat4.js\n// module id = 11\n// module chunks = 0 1","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > glMatrix.EPSILON ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Generates a random quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  let u1 = glMatrix.RANDOM();\n  let u2 = glMatrix.RANDOM();\n  let u3 = glMatrix.RANDOM();\n\n  let sqrt1MinusU1 = Math.sqrt(1 - u1);\n  let sqrtU1 = Math.sqrt(u1);\n\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/quat.js\n// module id = 12\n// module chunks = 0 1","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/vec3.js\n// module id = 13\n// module chunks = 0 1","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/vec4.js\n// module id = 14\n// module chunks = 0 1","export class MathUtility {\r\n\r\n  //将mat3转化为shader可以用的mat4\r\n  static convertToMat4(mat3)\r\n  {\r\n    var target = mat4.create();\r\n    target[0] = mat3[0];\r\n    target[1] = mat3[1];\r\n    target[4] = mat3[3];\r\n    target[5] = mat3[4];\r\n    target[12] = mat3[6];\r\n    target[13] = mat3[7];\r\n    return target;\r\n  }\r\n\r\n  //角度转弧度\r\n  static degToRad(deg)\r\n  {\r\n    return deg*(Math.PI/180);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/utils/MathUtility.js","export class Input {\n\n  static Init(stage)\n  {\n    Input.stage = stage;\n    Input.preventPropagation = false;\n\n    addEventListener('click', Input.inputEventHandle);\n    addEventListener('mousedown', Input.inputEventHandle);\n    addEventListener('mouseup', Input.inputEventHandle);\n    addEventListener('dblclick', Input.inputEventHandle);\n    addEventListener('mousemove', Input.inputEventHandle);\n\n    addEventListener(\"keydown\",Input.inputEventHandle);\n    addEventListener(\"keyup\",Input.inputEventHandle);\n  }\n\n  static inputEventHandle(event)\n  {\n    Input.stage.brocastEvent(event.type,event);\n    Input.preventPropagation = false;\n  }\n\n  //阻止当前事件冒泡\n  static stopPropagation()\n  {\n    Input.preventPropagation = true;\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/input/Input.js","//在所有渲染树流程完成之后，给用户一个后处理的机会，实现各种现代后处理效果\nimport {RenderSupport} from \"../rendering/RenderSupport.js\";\nimport {Status} from \"../debug/Status.js\";\nimport {Shader} from \"../shader/Shader.js\";\n\nexport class BasePostEffect {\n\n  constructor()\n  {\n    var canvas = document.getElementById('canvas');\n    //获取绘制二维上下文\n    this.gl = canvas.getContext('webgl');\n    if (!this.gl) {\n      console.log(\"webgl init Failed\");\n      return;\n    }\n  }\n\n  RenderImage(parentContainer,source)\n  {\n   Status.DrawCallCount ++;\n   this.onRenderImage(parentContainer,source);\n  }\n  /**\n   * 后处理\n   * @param parentContainer 此fboTexture的父容器.方便自定义后处理拿到显示列表做高级效果\n   * @param source 目标fbo纹理\n   */\n  onRenderImage(parentContainer,source)\n  {\n    let gl = this.gl;\n\n    //var bound = source.bounds;\n\n    //默认处理\n    var VSHADER_SOURCE =\n      \"attribute vec4 a_Position;\" +\n      \"attribute vec2 a_TextCoord;\" + // 接受纹理坐标\n      \"varying vec2 v_TexCoord;\" +    // 传递纹理坐标\n      \"void main() {\" +\n      //设置坐标\n      \"gl_Position = a_Position;\" +//设置坐标\n      //设置纹素\n      \"v_TexCoord = a_TextCoord; \" +  // 设置纹理坐标\n      \"} \";\n    //片元着色器\n    var FSHADER_SOURCE =\n      \"precision mediump float;\" +  //需要声明浮点数精度，否则报错No precision specified for (float)\n      \"uniform sampler2D u_Sampler;\" + // 取样器\n      \"varying vec2 v_TexCoord;\" +  // 接受纹理坐标\n      \"void main() {\" +\n      //设置颜色\n      \"gl_FragColor = texture2D(u_Sampler, v_TexCoord);\" +  // 设置颜色\n      \"}\";\n\n    var shader = new Shader(gl,VSHADER_SOURCE,FSHADER_SOURCE,false,true);\n\n    // var vertices = new Float32Array([\n    //   bound.width/2,  0,   0.0, 1.0,\n    //   0, bound.height,   0.0, 0.0,\n    //   bound.width,  0,   1.0, 1.0,\n    //   bound.width, bound.height,   1.0, 0.0\n    // ]);\n\n    var vertices = new Float32Array([\n      -1,  1,   0.0, 1.0,\n      -1, -1,   0.0, 0.0,\n      1,  1,   1.0, 1.0,\n      1, -1,   1.0, 0.0\n    ]);\n\n    var n = 4;//点的个数\n    var FSIZE = vertices.BYTES_PER_ELEMENT;\n\n    shader.CreateBuffer(vertices);\n\n    shader.SetAttribute(\"a_Position\",FSIZE,0);\n\n    shader.SetAttribute(\"a_TextCoord\",FSIZE,2);\n\n    shader.UseProgram();\n\n    shader.SetTexture(source.glFBOTexture,\"u_Sample\",0,true);\n\n    shader.Draw(n);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/postEffect/BasePostEffect.js","import {Stage} from \"./rendering/Stage.js\";\nimport {Input} from \"./input/Input.js\";\nimport {Status} from \"./debug/Status.js\";\nimport {RenderSupport} from \"./rendering/RenderSupport.js\";\n\nexport class mona {\n  constructor(targetFPS){\n\n    this.FPS = targetFPS ? targetFPS : 1000/30;\n\n    RenderSupport.Init();\n\n    this.stage = new Stage();\n\n    Input.Init(this.stage);\n\n  }\n\n  Init()\n  {\n\n    this._lastTime = new Date();\n    this._schedualID = setInterval(this.update.bind(this),this.FPS);\n  }\n\n  UnInit()\n  {\n    clearInterval(this._schedualID);\n  }\n\n  update()\n  {\n    var currentTime = new Date();\n    var deltaTime = currentTime - this._lastTime;\n    this._lastTime = currentTime;\n    Status.fps = 1000/deltaTime;\n\n    this.updateDisplayTree(deltaTime);\n  }\n\n  updateDisplayTree(deltaTime)\n  {\n\n    this.stage.RenderDisplayTree(deltaTime);\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/mona.js","import { DisplayContainer } from \"../display/DisplayContainer.js\";\r\nimport { GLSeetting } from  \"./GLSeetting.js\";\r\nimport {RenderSupport} from \"./RenderSupport.js\";\r\nimport {Status} from \"../debug/Status.js\";\r\n\r\n//舞台，渲染树的跟节点\r\nexport class Stage extends  DisplayContainer{\r\n  constructor(){\r\n    var canvas = document.getElementById('canvas');\r\n    super(canvas.width,canvas.height);\r\n    this.root = this;\r\n\r\n    new GLSeetting(this.gl,canvas.width,canvas.height);\r\n    }\r\n\r\n\r\n    RenderDisplayTree(deltaTime)\r\n    {\r\n      // 清空缓冲区，包括自定义和默认\r\n      this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n\r\n      Status.ResetDrawCount();\r\n      RenderSupport.ClearMatrix()\r\n      this.Render(deltaTime);\r\n\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/rendering/Stage.js","import * as glMatrix from \"./common.js\"\n\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nexport function fromValues(m00, m01, m10, m11) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    let a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n\n  // Calculate the determinant\n  let det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] =  a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] =  a0 * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  let a0 = a[0];\n  out[0] =  a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] =  a0;\n\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n}\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix\n * @param {mat2} D the diagonal matrix\n * @param {mat2} U the upper triangular matrix\n * @param {mat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2]/a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/mat2.js\n// module id = 20\n// module chunks = 0 1","import * as glMatrix from \"./common.js\";\n\n/**\n * 2x3 Matrix\n * @module mat2d\n *\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nexport function fromValues(a, b, c, d, tx, ty) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function invert(out, a) {\n  let aa = a[0], ab = a[1], ac = a[2], ad = a[3];\n  let atx = a[4], aty = a[5];\n\n  let det = aa * ad - ab * ac;\n  if(!det){\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nexport function translate(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}\n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n}\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nexport const sub = subtract;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/mat2d.js\n// module id = 21\n// module chunks = 0 1","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\nexport function create() {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n  dq[3] = 1;\n  return dq;\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function clone(a) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  let ax = x2 * 0.5,\n    ay = y2 * 0.5,\n    az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q quaternion\n * @param {vec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotationTranslation(out, q, t) {\n  let ax = t[0] * 0.5,\n    ay = t[1] * 0.5,\n    az = t[2] * 0.5,\n    bx = q[0],\n    by = q[1],\n    bz = q[2],\n    bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Creates a dual quat from a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {vec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {mat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  let outer = quat.create();\n  mat4.getRotation(outer, a);\n  let t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} real part\n */\nexport const getReal = quat.copy;\n\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} dual part\n */\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\nexport const setReal = quat.copy;\n\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {quat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\nexport function getTranslation(out, a) {\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to translate\n * @param {vec3} v vector to translate by\n * @returns {quat2} out\n */\nexport function translate(out, a, v) {\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3],\n    bx1 = v[0] * 0.5,\n    by1 = v[1] * 0.5,\n    bz1 = v[2] * 0.5,\n    ax2 = a[4],\n    ay2 = a[5],\n    az2 = a[6],\n    aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateX(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateY(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateZ(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {quat} q quaternion to rotate by\n * @returns {quat2} out\n */\nexport function rotateByQuatAppend(out, a, q) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat} q quaternion to rotate by\n * @param {quat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\nexport function rotateByQuatPrepend(out, q, a) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    bx = a[0],\n    by = a[1],\n    bz = a[2],\n    bw = a[3];\n\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {vec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n  let axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  let bx = s * axis[0] / axisLength;\n  let by = s * axis[1] / axisLength;\n  let bz = s * axis[2] / axisLength;\n  let bw = Math.cos(rad);\n\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return out;\n}\n\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n * @function\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n */\nexport function multiply(out, a, b) {\n  let ax0 = a[0],\n    ay0 = a[1],\n    az0 = a[2],\n    aw0 = a[3],\n    bx1 = b[4],\n    by1 = b[5],\n    bz1 = b[6],\n    bw1 = b[7],\n    ax1 = a[4],\n    ay1 = a[5],\n    az1 = a[6],\n    aw1 = a[7],\n    bx0 = b[0],\n    by0 = b[1],\n    bz0 = b[2],\n    bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = quat.dot;\n\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\nexport function lerp(out, a, b, t) {\n  let mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\nexport function invert(out, a) {\n  let sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Calculates the length of a dual quat\n *\n * @param {quat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\nexport const length = quat.length;\n\n/**\n * Alias for {@link quat2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {quat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = quat.squaredLength;\n\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\nexport function normalize(out, a) {\n  let magnitude = squaredLength(a);\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n\n    let a0 = a[0] / magnitude;\n    let a1 = a[1] / magnitude;\n    let a2 = a[2] / magnitude;\n    let a3 = a[3] / magnitude;\n\n    let b0 = a[4];\n    let b1 = a[5];\n    let b2 = a[6];\n    let b3 = a[7];\n\n    let a_dot_b = (a0 * b0) + (a1 * b1) + (a2 * b2) + (a3 * b3);\n\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n\n    out[4] = (b0 - (a0 * a_dot_b)) / magnitude;\n    out[5] = (b1 - (a1 * a_dot_b)) / magnitude;\n    out[6] = (b2 - (a2 * a_dot_b)) / magnitude;\n    out[7] = (b3 - (a3 * a_dot_b)) / magnitude;\n  }\n  return out;\n}\n\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {quat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat2} a the first dual quaternion.\n * @param {quat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n    a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {quat2} a the first dual quat.\n * @param {quat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3],\n    a4 = a[4],\n    a5 = a[5],\n    a6 = a[6],\n    a7 = a[7];\n  let b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)));\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/quat2.js\n// module id = 22\n// module chunks = 0 1","import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  let p0 = a[0] - b[0],\n  p1 = a[1] - b[1],\n  sinC = Math.sin(c),\n  cosC = Math.cos(c);\n  \n  //perform rotation and translate to correct position\n  out[0] = p0*cosC - p1*sinC + b[0];\n  out[1] = p0*sinC + p1*cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1];\n  \n  let len1 = x1*x1 + y1*y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n  \n  let len2 = x2*x2 + y2*y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n  \n  let cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n  \n  \n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1];\n  let b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_gl-matrix@2.7.0@gl-matrix/src/gl-matrix/vec2.js\n// module id = 23\n// module chunks = 0 1","import { Vector2 } from \"./Vector2.js\";\r\nimport {MathUtility} from \"./MathUtility.js\";\r\n\r\nexport class Transform {\r\n\r\n  constructor() {\r\n    this._localPosition = false;\r\n    this._localRotation = false;\r\n    this._localScale =  false;\r\n\r\n    this._transformMatrix = mat3.create();\r\n  }\r\n\r\n  get localPosition()\r\n  {\r\n    return this._localPosition;\r\n  }\r\n  set localPosition(value)\r\n  {\r\n    if((value instanceof  Vector2)== false)\r\n    {\r\n      console.log(\"Transform set posion error\");\r\n      return;\r\n    }\r\n\r\n    this._localPosition = value;\r\n  }\r\n\r\n  get localRotation()\r\n  {\r\n    return this._localRotation;\r\n  }\r\n\r\n  set localRotation(value)\r\n  {\r\n    this._localRotation = value;\r\n  }\r\n\r\n  get localScale()\r\n  {\r\n    return this._localScale;\r\n  }\r\n\r\n  set localScale(value)\r\n  {\r\n    if((value instanceof  Vector2)== false)\r\n    {\r\n      console.log(\"Transform set scale error\");\r\n      return;\r\n    }\r\n\r\n    this._localScale = value;\r\n  }\r\n\r\n  get transformMatrix()\r\n  {\r\n    mat3.identity(this._transformMatrix);\r\n\r\n    mat3.translate(this._transformMatrix,this._transformMatrix,this.localPosition.toArray());\r\n    mat3.rotate(this._transformMatrix,this._transformMatrix,MathUtility.degToRad(this.localRotation));\r\n    mat3.scale(this._transformMatrix,this._transformMatrix,this.localScale.toArray());\r\n\r\n    // var projectionMatrix = mat3.create();\r\n    // mat3.projection(projectionMatrix,640,480);\r\n    // var finalMatrix = mat3.create();\r\n    // mat3.multiply(finalMatrix,projectionMatrix,this._transformMatrix);\r\n\r\n    //实现2，这种直接用mat4算，结果不用再转\r\n    //mat4.identity(this._transformMatrix);\r\n    //mat4.translate(this._transformMatrix,this._transformMatrix,this.localPosition.toArray3(0));\r\n    //mat4.rotateZ(this._transformMatrix,this._transformMatrix,this.localRotation);\r\n    //mat4.scale(this._transformMatrix,this._transformMatrix,this.localScale.toArray3(1));\r\n    //var orthMatrix = mat4.create();\r\n    //mat4.ortho(orthMatrix,0,640,480,0,-1,1);\r\n    //mat4.multiply(this._transformMatrix,orthMatrix,this._transformMatrix);\r\n    //return this._transformMatrix;\r\n\r\n    return this._transformMatrix;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/utils/Transform.js","import {EventDefine} from \"../events/EventDefine.js\";\nimport {Input} from \"./Input.js\";\n\n//系统监听事件冒泡\nexport class InputEventListener {\n\n  constructor()\n  {\n    this.listenerList = new Array();\n  }\n\n  //相对于世界坐标的包围盒\n  getBound()\n  {\n      console.log(\"InputEventListener getBound need override\");\n  }\n\n  brocastEvent(eventType,eventData)\n  {\n    if(Input.preventPropagation)\n    {\n      return;\n    }\n\n    if(!this.hasEvent(eventType))\n    {\n      return;\n    }\n\n    if(eventType == EventDefine.MOUSE_EVENT_CLICK\n    || eventType == EventDefine.MOUSE_EVENT_DOUBLE_CLICK\n    || eventType == EventDefine.MOUSE_EVENT_DOWN\n    || eventType == EventDefine.MOUSE_EVENT_UP\n    || eventType == EventDefine.MOUSE_EVENT_MOVE)\n    {\n      let bound = this.getBound();\n      if(!bound)\n      {\n        return;\n      }\n\n      if(!bound.CheckInteractPoint(eventData.x,eventData.y))\n      {\n        return;\n      }\n    }\n\n    this.listenerList[eventType][0].call(this.listenerList[eventType][1],eventData);\n  }\n\n  hasEvent(eventType)\n  {\n    return this.listenerList[eventType];\n  }\n\n  addEventListener(handlerObj,eventType,handlerFunc,priority)\n  {\n    if(this.hasEvent(eventType))\n    {\n      console.log(\"InputEventListener addEventListener error\");\n      return;\n    }\n\n    this.listenerList[eventType] = [];\n    this.listenerList[eventType][0] = handlerFunc;\n    this.listenerList[eventType][1] = handlerObj;\n  }\n\n  removeEventListener(eventType)\n  {\n    if(!this.hasEvent(eventType))\n    {\n      return;\n    }\n\n    delete this.listenerList[eventType];\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/input/InputEventListener.js","import {Vector2} from \"./Vector2.js\";\n\nexport class Bound {\n  //x,y是左上角\n  constructor(x,y,width,height)\n  {\n    this.x= x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  CheckInteractPoint(x,y)\n  {\n    return this.x <= x && (this.width+this.x) >= x && this.y <= y && (this.height+this.y) >= y;\n  }\n\n  CheckInteractBound(bound)\n  {\n      let aCenter = this.GetCenterPoint();\n      let bCenter = bound.GetCenterPoint();\n\n    if(Math.abs(aCenter.x - bCenter.x) < this.width/2 + bound.width/2 //横向判断\n     && Math.abs(aCenter.y - bCenter.y) < this.height/2 + bound.height/2) //纵向判断\n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  GetCenterPoint()\n  {\n    return new Vector2(this.x+this.width/2,this.y+this.height/2);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/utils/Bound.js","\r\nexport class webglUtils {\r\n\r\n\r\n  static InitShader(gl,vertShaderSource,fragShaderSource)\r\n  {\r\n\r\n    var vertShader = gl.createShader(gl.VERTEX_SHADER);\r\n    gl.shaderSource(vertShader, vertShaderSource);\r\n    gl.compileShader(vertShader);\r\n\r\n    var fragShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(fragShader, fragShaderSource);\r\n    gl.compileShader(fragShader);\r\n    //合并程序\r\n    var shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertShader);\r\n    gl.attachShader(shaderProgram, fragShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    return shaderProgram;\r\n  }\r\n\r\n }\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/utils/webglUtils.js","//rtt图 数据结构\nexport class RenderTexture {\n\n  constructor(glFBOTexture,bounds)\n  {\n    this.glFBOTexture = glFBOTexture;\n    this.bounds = bounds;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/texture/RenderTexture.js","export class Event {\r\n\r\n  constructor()\r\n  {\r\n\r\n  }\r\n\r\n  static AddEvent(obj,eventID,callBack)\r\n  {\r\n      if(!Event._events[eventID])\r\n      {\r\n        Event._events[eventID] = [];\r\n      }\r\n\r\n      //拒绝一样的监听\r\n    let eventArr = Event._events[eventID];\r\n    for (let i = 0; i < eventArr.length;i++)\r\n    {\r\n      if(eventArr[i][0] == obj && eventArr[i][1] == callBack)\r\n      {\r\n       return;\r\n      }\r\n    }\r\n\r\n    eventArr.push([obj, callBack]);\r\n\r\n  }\r\n\r\n  static RemoeEvent(obj,eventID)\r\n  {\r\n    if(!Event._events[eventID])\r\n    {\r\n      return;\r\n    }\r\n\r\n    let eventArr = Event._events[eventID];\r\n    for (let i = 0; i < eventArr.length;i++)\r\n    {\r\n      if(eventArr[i][0] == obj)\r\n      {\r\n        eventArr.splice(i, 1);\r\n        i--;\r\n      }\r\n    }\r\n  }\r\n\r\n  static Dispatch(eventID,arg)\r\n  {\r\n    if(!Event._events[eventID])\r\n    {\r\n      return;\r\n    }\r\n\r\n    let eventArr = Event._events[eventID];\r\n    for (let i = 0; i < eventArr.length;i++)\r\n    {\r\n      eventArr[i][1].call(eventArr[i][0],arg);\r\n    }\r\n  }\r\n}\r\nEvent._events = {};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/events/Event.js","import {DisplayObject} from \"./DisplayObject.js\";\r\nimport {VertexData} from \"../utils/VertexData.js\";\r\n\r\nexport class Quad extends DisplayObject{\r\n\r\n  constructor(width,height){\r\n    super(width,height);\r\n    this._texture = false;\r\n  }\r\n\r\n\r\n  _vFillVertices()\r\n  {\r\n\r\n    if(!this.vertextData)\r\n    {\r\n      this.vertextData = new VertexData();\r\n    }\r\n\r\n    this.vertextData.SetVertextPosition(0,0,0);\r\n    this.vertextData.SetTextureCoords(0,0,1);\r\n\r\n    this.vertextData.SetVertextPosition(1,0,this.height);\r\n    this.vertextData.SetTextureCoords(1,0,0);\r\n\r\n    this.vertextData.SetVertextPosition(2,this.width,0);\r\n    this.vertextData.SetTextureCoords(2,1,1);\r\n\r\n    this.vertextData.SetVertextPosition(3,this.width,this.height);\r\n    this.vertextData.SetTextureCoords(3,1,0);\r\n\r\n  }\r\n\r\n  ExpandVertextToBatch()\r\n  {\r\n    this.vertextData.ExpandVertextToBatch();\r\n  }\r\n\r\n  //vitual private\r\n  //当顶点或者纹理(attribute)等需要重建时\r\n  _vFillBuffer()\r\n  {\r\n    this._shader.CreateBuffer(this.vertextData.vertices);\r\n\r\n\r\n    var FSIZE = this.vertextData.BYTES_PER_ELEMENT;\r\n    this._shader.SetAttribute(\"a_Position\",FSIZE,0);\r\n    this._shader.SetAttribute(\"a_TextCoord\",FSIZE,2);\r\n  }\r\n\r\n  //vitual private\r\n  //unifonm参数发生变化\r\n  _vFillUniform()\r\n  {\r\n    super._vFillUniform();\r\n\r\n    let gl = this.gl;\r\n\r\n    this._shader.SetTexture(this._texture,\"u_Sampler\",0);\r\n\r\n    //绘制矩形\r\n    this._shader.Draw(this.vertextData.vertextNum);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/display/Quad.js","\nexport class Asset {\n  constructor(content,assetType,lifeType)\n  {\n    this.content = content;\n    this.assetType = assetType;\n    this.lifeType = lifeType;\n  }\n}\n\n\n\nexport class ResourceService {\n\n  constructor()\n  {\n\n  }\n\n  static Init()\n  {\n    ResourceService.AssetDic = new Array();\n  }\n\n\n  static AddAsset(key,content,assetType,lifeType)\n  {\n    var asset = new Asset(content,assetType,lifeType);\n    if(!ResourceService.AssetDic[key])\n    {\n      ResourceService.AssetDic[key] = [];\n    }\n\n    let assetArray = ResourceService.AssetDic[key];\n    assetArray[assetArray.length] = asset;\n  }\n\n\n  static GetAssets(key)\n  {\n    if(!ResourceService.AssetDic[key])\n    {\n      console.log(\"ResourceService GetAsset Error\");\n      return;\n    }\n\n    return ResourceService.AssetDic[key];\n  }\n\n\n}\nResourceService.Init();\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/weFlyGame/framework/ResourceService.js","export class GameEventDefine {\n  static get EVENT_LOAD_COMPLETE()\n  {\n    return \"loadAllComplete\";\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/weFlyGame/logic/GameEventDefine.js","\r\nexport class VertexData\r\n{\r\n  constructor(isBatch)\r\n  {\r\n    if(isBatch)\r\n    {\r\n      this._vertices = new Float32Array([ //readyonly\r\n        0.0,  0.0,   0.0, 1.0,\r\n        0.0,  0.0,   0.0, 1.0,\r\n        -0.0, -0.0,   0.0, 0.0,\r\n        0.0,  0.0,   1.0, 1.0,\r\n        0.0, -0.0,   1.0, 0.0,\r\n        0.0, -0.0,   1.0, 0.0,\r\n      ]);\r\n    }\r\n    else\r\n    {\r\n      this._vertices = new Float32Array([ //readyonly\r\n        0.0,  0.0,   0.0, 1.0,\r\n        -0.0, -0.0,   0.0, 0.0,\r\n        0.0,  0.0,   1.0, 1.0,\r\n        0.0, -0.0,   1.0, 0.0,\r\n      ]);\r\n    }\r\n\r\n    this.VERTEXT_PER_ELEMENT_COUNT = 4;\r\n  }\r\n\r\n  get vertices()\r\n  {\r\n    return this._vertices;\r\n  }\r\n\r\n\r\n  get BYTES_PER_ELEMENT()\r\n  {\r\n    return this._vertices.BYTES_PER_ELEMENT;\r\n  }\r\n\r\n  get vertextNum()\r\n  {\r\n    return this._vertices.length / this.VERTEXT_PER_ELEMENT_COUNT;\r\n  }\r\n\r\n  //扩充quad到可以支持batch渲染，通过退化三角形来实现不同三角带的断开\r\n  ExpandVertextToBatch()\r\n  {\r\n    var oldVertext = this._vertices;\r\n    this._vertices = new Float32Array(this._vertices.length + this.VERTEXT_PER_ELEMENT_COUNT * 2 );\r\n    for(let i = 0; i < this._vertices.length;i++)\r\n    {\r\n      //拷贝第一个点\r\n      if(i < this.VERTEXT_PER_ELEMENT_COUNT)\r\n      {\r\n        this._vertices[i] = oldVertext[i];\r\n        continue;\r\n      }\r\n\r\n      //拷贝最后一个点\r\n      if(i >= this.VERTEXT_PER_ELEMENT_COUNT * 5)\r\n      {\r\n        this._vertices[i] = oldVertext[i - this.VERTEXT_PER_ELEMENT_COUNT * 2];\r\n        continue;\r\n      }\r\n\r\n      this._vertices[i] = oldVertext[i - this.VERTEXT_PER_ELEMENT_COUNT];\r\n    }\r\n  }\r\n\r\n\r\n  ClearRestBatchVertext(displayNum)\r\n  {\r\n    let perQuadVerticeLength = 24;\r\n    var oldVertices = this._vertices;\r\n    this._vertices = new Float32Array(displayNum*perQuadVerticeLength);\r\n    for(let i = 0; i < this._vertices.length;i++)\r\n    {\r\n      this._vertices[i] = oldVertices[i];\r\n    }\r\n  }\r\n\r\n  //ID从0开始\r\n  SetVertextPosition(vertextID,posX,posY)\r\n  {\r\n    let index = vertextID * this.VERTEXT_PER_ELEMENT_COUNT;\r\n    this._vertices[index] = posX;\r\n    this._vertices[index + 1] = posY;\r\n  }\r\n\r\n  //预留 ID从0开始\r\n  SetVertextColor(vertextID,r,g,b,a)\r\n  {\r\n\r\n  }\r\n\r\n  //ID从0开始\r\n  SetTextureCoords(vertextID,u,v)\r\n  {\r\n    let index = vertextID * this.VERTEXT_PER_ELEMENT_COUNT + 2;\r\n    this._vertices[index] = u;\r\n    this._vertices[index + 1] = v;\r\n  }\r\n\r\n  //追加顶点到batch\r\n  AppendBatchVertices(vertextData,childIndex,transformationMatrix)\r\n  {\r\n    if((vertextData instanceof  VertexData) == false)\r\n    {\r\n      console.log(\"VertexData AppendVertices error\");\r\n      return;\r\n    }\r\n\r\n    let perQuadVerticeLength = 24;\r\n    if(this.vertices.length < (childIndex+1)*perQuadVerticeLength + perQuadVerticeLength)\r\n    {\r\n      let oldVertices = this.vertices;\r\n      this._vertices = new Float32Array(oldVertices.length+perQuadVerticeLength);\r\n      for (let i = 0; i < oldVertices.length;i++)\r\n      {\r\n        this._vertices[i] = oldVertices[i];\r\n      }\r\n    }\r\n\r\n\r\n    let curVertextID = (childIndex+1) * vertextData.vertextNum;\r\n    for (let i = 0; i < vertextData.vertextNum;i++)\r\n    {\r\n      let index = curVertextID * this.VERTEXT_PER_ELEMENT_COUNT;\r\n      let sourceDataOffset = this.VERTEXT_PER_ELEMENT_COUNT * i;\r\n      let x = vertextData.vertices[sourceDataOffset];\r\n      let y = vertextData.vertices[++sourceDataOffset];\r\n      this._vertices[index] = transformationMatrix[0] * x + transformationMatrix[3] * y + transformationMatrix[6];\r\n      this._vertices[++index] = transformationMatrix[4] * y + transformationMatrix[1] * x + transformationMatrix[7];\r\n\r\n      for(let j = 0; j < this.VERTEXT_PER_ELEMENT_COUNT-2;j++)\r\n      {\r\n        this._vertices[++index] = vertextData.vertices[++sourceDataOffset];\r\n      }\r\n      curVertextID ++;\r\n    }\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/utils/VertexData.js","import {Wefly} from \"./logic/Wefly.js\";\r\n\r\n\r\nwindow.onload = function () {\r\n new Wefly();\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/weFlyGame/main.js","import {LoaderService} from \"../framework/LoaderService.js\";\nimport {Sprite} from \"../../mona/display/Sprite.js\";\nimport {GameEventDefine} from \"./GameEventDefine.js\";\nimport {Event} from \"../../mona/events/Event.js\";\nimport {ResourceService} from \"../framework/ResourceService.js\";\nimport {mona} from \"../../mona/mona.js\";\nimport {MovieClip} from \"../../mona/animation/MovieClip.js\";\nimport {Vector2} from \"../../mona/utils/Vector2.js\";\nimport {EventDefine} from \"../../mona/events/EventDefine.js\";\nimport {BatchSprite} from \"../../mona/display/BatchSprite.js\";\nimport {Text} from \"../../mona/text/Text.js\";\nimport {BasePostEffect} from \"../../mona/postEffect/BasePostEffect.js\";\nimport {DisplayContainer} from \"../../mona/display/DisplayContainer.js\";\nimport {Shader} from \"../../mona/shader/Shader.js\";\n\nclass Enemy\n{\n  constructor(type,display,parent,stage)\n  {\n    this.hp = type;\n    this.type = type;\n    this.display = display;\n    this.parent = parent;\n    this.stage = stage;\n  }\n\n  playDead()\n  {\n    this.parent.RemoveSprite(this.display);\n    this.deadMovie = false;\n    if(this.type == 1)\n    {\n      this.deadMovie = new MovieClip(ResourceService.GetAssets(\"enemy1_down\"));\n    }else if(this.type == 2)\n    {\n      this.deadMovie = new MovieClip(ResourceService.GetAssets(\"enemy2_down\"));\n    }else if(this.type ==3)\n    {\n      this.deadMovie = new MovieClip(ResourceService.GetAssets(\"enemy3_down\"));\n    }\n\n    this.stage.AddChild(this.deadMovie);\n\n    this.deadMovie.localPosition = this.display.localPosition;\n    this.deadMovie.playSpeed = 100;\n    this.deadMovie.Play();\n\n    setTimeout(this.removeDead.bind(this),300)\n  }\n\n  removeDead()\n  {\n    this.stage.RemoveChild(this.deadMovie);\n  }\n\n  remove()\n  {\n    this.parent.RemoveSprite(this.display);\n  }\n}\n\n\nexport class Wefly\n{\n  constructor()\n  {\n    let engine = new mona();\n    engine.Init();\n    this.stage = engine.stage;\n    let shader1 = {\"vsFile\":\"/dist/mona/shader/simpleTexture-vext.glsl\",\"fsFile\" :\"/dist/mona/shader/simpleTexture-frag.glsl\"};\n    let shader2 = {\"vsFile\":\"/dist/mona/shader/text-vext.glsl\",\"fsFile\" :\"/dist/mona/shader/text-frag.glsl\"};\n    // let shaders = require('../shaders.json');\n\n    //debugger\n\n    Shader.WarmupAllShaders([shader1,shader2],this.loadResource,this);\n  }\n\n  loadResource()\n  {\n    LoaderService.AddLoad(\"bullet1\",\"img/shoot/bullet1.png\");\n\n    LoaderService.AddLoad(\"enemy1\",\"img/shoot/enemy1.png\");\n    LoaderService.AddLoad(\"enemy1_down\",\"img/shoot/enemy1_down1.png\");\n    LoaderService.AddLoad(\"enemy1_down\",\"img/shoot/enemy1_down2.png\");\n    LoaderService.AddLoad(\"enemy1_down\",\"img/shoot/enemy1_down3.png\");\n    LoaderService.AddLoad(\"enemy1_down\",\"img/shoot/enemy1_down4.png\");\n\n    LoaderService.AddLoad(\"enemy2\",\"img/shoot/enemy2.png\");\n    LoaderService.AddLoad(\"enemy2_down\",\"img/shoot/enemy2_down1.png\");\n    LoaderService.AddLoad(\"enemy2_down\",\"img/shoot/enemy2_down2.png\");\n    LoaderService.AddLoad(\"enemy2_down\",\"img/shoot/enemy2_down3.png\");\n    LoaderService.AddLoad(\"enemy2_down\",\"img/shoot/enemy2_down4.png\");\n\n    LoaderService.AddLoad(\"enemy3\",\"img/shoot/enemy3.png\");\n    LoaderService.AddLoad(\"enemy3_down\",\"img/shoot/enemy3_down1.png\");\n    LoaderService.AddLoad(\"enemy3_down\",\"img/shoot/enemy3_down2.png\");\n    LoaderService.AddLoad(\"enemy3_down\",\"img/shoot/enemy3_down3.png\");\n    LoaderService.AddLoad(\"enemy3_down\",\"img/shoot/enemy3_down4.png\");\n\n\n    LoaderService.AddLoad(\"game_pause\",\"img/shoot/game_pause_nor.png\");\n    LoaderService.AddLoad(\"game_resume\",\"img/shoot/game_resume_nor.png\");\n\n    LoaderService.AddLoad(\"hero\",\"img/shoot/hero1.png\");\n    LoaderService.AddLoad(\"hero\",\"img/shoot/hero2.png\");\n\n    LoaderService.AddLoad(\"hero_down\",\"img/shoot/hero_blowup_n1.png\");\n    LoaderService.AddLoad(\"hero_down\",\"img/shoot/hero_blowup_n2.png\");\n    LoaderService.AddLoad(\"hero_down\",\"img/shoot/hero_blowup_n3.png\");\n    LoaderService.AddLoad(\"hero_down\",\"img/shoot/hero_blowup_n4.png\");\n\n\n\n    LoaderService.AddLoad(\"background\",\"img/shoot_background/background.png\");\n    LoaderService.AddLoad(\"btn_finish\",\"img/shoot_background/btn_finish.png\");\n    LoaderService.AddLoad(\"game_loading\",\"img/shoot_background/game_loading1.png\");\n    LoaderService.AddLoad(\"game_loading\",\"img/shoot_background/game_loading2.png\");\n    LoaderService.AddLoad(\"game_loading\",\"img/shoot_background/game_loading3.png\");\n    LoaderService.AddLoad(\"game_loading\",\"img/shoot_background/game_loading4.png\");\n    LoaderService.AddLoad(\"gameover\",\"img/shoot_background/gameover.png\");\n    LoaderService.AddLoad(\"shoot_copyright\",\"img/shoot_background/shoot_copyright.png\");\n\n    LoaderService.Load();\n    Event.AddEvent(this,GameEventDefine.EVENT_LOAD_COMPLETE,this.loadcomplete);\n  }\n\n  loadcomplete()\n  {\n    this.gotoInitScene();\n  }\n\n  gotoInitScene()\n  {\n    this.background = new Sprite(ResourceService.GetAssets(\"background\")[0].content);\n    this.stage.AddChild(this.background);\n\n    this.game_loading = new MovieClip(ResourceService.GetAssets(\"game_loading\"));\n    this.stage.AddChild(this.game_loading);\n    this.game_loading.localPosition = new Vector2(100,400);\n    this.game_loading.playSpeed = 300;\n    this.game_loading.Play();\n\n    this.shoot_copyright = new Sprite(ResourceService.GetAssets(\"shoot_copyright\")[0].content);\n    this.stage.AddChild(this.shoot_copyright);\n    this.shoot_copyright.localPosition = new Vector2(0,50);\n\n    this._bulletCounting = 0;\n    this._enemyCounting = 0;\n    this._score = 0;\n    this._gamePause = false;\n\n\n    setTimeout(this.gotoBattleScene.bind(this),3000);\n  }\n\n  gotoBattleScene()\n  {\n    this.stage.RemoveChild(this.game_loading);\n    this.stage.RemoveChild(this.shoot_copyright);\n\n    this.hero = new MovieClip(ResourceService.GetAssets(\"hero\"));\n    this.stage.AddChild(this.hero);\n    this.hero.localPosition = new Vector2(100,400);\n    this.hero.Play();\n\n    this.hero.addEventListener(this,EventDefine.MOUSE_EVENT_DOWN,this.startFocusHero);\n    this.stage.customPostRender = new BasePostEffect();\n\n    if(!this.bullets)\n    {\n      this.bullets = [];\n      this.batchBulletContainer = new BatchSprite(ResourceService.GetAssets(\"bullet1\")[0].content);\n      this.stage.AddChild(this.batchBulletContainer);\n    }\n\n    if(!this.enemys)\n    {\n      this.enemys = [];\n      this.batchEnemy1Container = new BatchSprite(ResourceService.GetAssets(\"enemy1\")[0].content);\n      this.stage.AddChild(this.batchEnemy1Container);\n\n      this.batchEnemy2Container = new BatchSprite(ResourceService.GetAssets(\"enemy2\")[0].content);\n      this.stage.AddChild(this.batchEnemy2Container);\n\n      this.batchEnemy3Container = new BatchSprite(ResourceService.GetAssets(\"enemy3\")[0].content);\n      this.stage.AddChild(this.batchEnemy3Container);\n    }\n\n    this.menuContainer = new DisplayContainer();\n    var game_pause = new Sprite(ResourceService.GetAssets(\"game_pause\")[0].content);\n    game_pause.localPosition = new Vector2(320,10);\n    game_pause.addEventListener(this,EventDefine.MOUSE_EVENT_CLICK,this.onGamePause);\n    game_pause.AddSubShader(this,this.OnGamePauseSubShader);\n    this.menuContainer.AddChild(game_pause);\n    var game_resume = new Sprite(ResourceService.GetAssets(\"game_resume\")[0].content);\n    game_resume.localPosition = new Vector2(400,10);\n    game_resume.addEventListener(this,EventDefine.MOUSE_EVENT_CLICK,this.onGameResume);\n    this.menuContainer.AddChild(game_resume);\n\n\n    this.stage.AddChild(this.menuContainer);\n    this.menuContainer.cacheAsBitmap = true;\n\n    this.updateID = setInterval(this.updateLogic.bind(this),30);\n  }\n\n  startFocusHero(eventData)\n  {\n    this.focusHero(eventData);\n    this.hero.addEventListener(this,EventDefine.MOUSE_EVENT_MOVE,this.heroMove);\n    this.stage.addEventListener(this,EventDefine.MOUSE_EVENT_UP,this.loseFocusHero);\n  }\n\n  loseFocusHero(eventData)\n  {\n    this.hero.removeEventListener(EventDefine.MOUSE_EVENT_MOVE);\n    this.stage.removeEventListener(EventDefine.MOUSE_EVENT_UP);\n  }\n\n  focusHero(eventData)\n  {\n    var point = this.hero.parent.GlobalToLocal(new Vector2(eventData.x,eventData.y));\n    this.hero.localPosition = new Vector2(point.x-this.hero.width/2,point.y-this.hero.height/2);\n  }\n\n  onGamePause(eventData)\n  {\n    this._gamePause = !this._gamePause;\n\n    if(this._gamePause)\n    {\n      clearInterval(this.updateID);\n    }else{\n      this.updateID = setInterval(this.updateLogic.bind(this),30);\n    }\n  }\n\n  onGameResume(eventData)\n  {\n    this.dispose();\n    this.gotoInitScene();\n  }\n\n  heroMove(eventData)\n  {\n    this.focusHero(eventData);\n  }\n\n  OnGamePauseSubShader(arg)\n  {\n    console.log(\"OnGamePauseSubShader\");\n  }\n\n  updateLogic()\n  {\n    this.dynamicCreateBullets();\n    this.dynamicCreateEnemys();\n    this.bulletsFly();\n    this.enemysFly();\n    this.checkBulletHit();\n    this.checkDead();\n  }\n\n  dynamicCreateBullets()\n  {\n\n    this._bulletCounting ++;\n\n    if(this._bulletCounting % 3 != 0)\n    {\n      return;\n    }\n\n\n    var bullet = new Sprite(ResourceService.GetAssets(\"bullet1\")[0].content);\n    this.batchBulletContainer.AddSprite(bullet);\n    var bornPoint = this.hero.LocalToGlobal(new Vector2(this.hero.width/2,0));\n    bullet.localPosition = bullet.parent.GlobalToLocal(bornPoint);\n    this.bullets[this.bullets.length] = bullet;\n  }\n\n  dynamicCreateEnemys()\n  {\n    this._enemyCounting ++;\n\n    if(this._enemyCounting % 10 != 0)\n    {\n      return;\n    }\n\n    var fakeRandomPoint = Math.random();\n    var easyEnemyPoint = 0.5;\n    var normalEnemyPoint = 0.8;\n    var hardEnemyPoint = 1;\n    if(fakeRandomPoint > 0 && fakeRandomPoint <= easyEnemyPoint)\n    {\n      var enemy = new Sprite(ResourceService.GetAssets(\"enemy1\")[0].content);\n      this.batchEnemy1Container.AddSprite(enemy);\n      enemy.localPosition = new Vector2(Math.random()*this.stage.width,0);\n\n      var easyEnemy = new Enemy(1,enemy,this.batchEnemy1Container,this.stage);\n      this.enemys[this.enemys.length] = easyEnemy;\n    }else if(fakeRandomPoint > easyEnemyPoint && fakeRandomPoint <= normalEnemyPoint)\n    {\n      var enemy = new Sprite(ResourceService.GetAssets(\"enemy2\")[0].content);\n      this.batchEnemy2Container.AddSprite(enemy);\n      enemy.localPosition = new Vector2(Math.random()*this.stage.width,0);\n\n      var normalEnemy = new Enemy(2,enemy,this.batchEnemy2Container,this.stage);\n      this.enemys[this.enemys.length] = normalEnemy;\n    }else if(fakeRandomPoint > normalEnemyPoint && fakeRandomPoint <= hardEnemyPoint)\n    {\n      var enemy = new Sprite(ResourceService.GetAssets(\"enemy3\")[0].content);\n      this.batchEnemy3Container.AddSprite(enemy);\n      enemy.localPosition = new Vector2(Math.random()*this.stage.width,0);\n\n      var hardEnemy = new Enemy(3,enemy,this.batchEnemy3Container,this.stage);\n      this.enemys[this.enemys.length] = hardEnemy;\n    }\n  }\n\n\n  bulletsFly()\n  {\n    for (let i = 0; i<this.bullets.length;i++)\n    {\n      let curpositon = this.bullets[i].localPosition;\n      this.bullets[i].localPosition = new Vector2(curpositon.x,curpositon.y-8);\n\n      if(!this.bullets[i].hitTest(this.stage.getBound()))\n      {\n        this.batchBulletContainer.RemoveSprite(this.bullets[i]);\n        this.bullets.splice(i,1);\n        i--;\n      }\n    }\n\n  }\n\n  enemysFly()\n  {\n    for (let i = 0; i<this.enemys.length;i++)\n    {\n      let curpositon = this.enemys[i].display.localPosition;\n      this.enemys[i].display.localPosition = new Vector2(curpositon.x,curpositon.y+2);\n\n      if(!this.enemys[i].display.hitTest(this.stage.getBound()))\n      {\n        this.enemys[i].remove();\n        this.enemys.splice(i,1);\n        i--;\n      }\n    }\n\n  }\n\n  checkBulletHit()\n  {\n    for (let i = 0; i<this.bullets.length;i++)\n    {\n      var bullet = this.bullets[i];\n      for (let j = 0; j<this.enemys.length;j++)\n      {\n        var enemy = this.enemys[j];\n        if(bullet.hitTest(enemy.display.getBound()))\n        {\n          enemy.hp--;\n          if(enemy.hp <= 0)\n          {\n            enemy.playDead();\n            this.enemys.splice(j,1);\n            j--;\n          }\n          this.bullets.splice(i, 1);\n          this.batchBulletContainer.RemoveSprite(bullet);\n          i--;\n          this._score ++;\n          break;\n        }\n      }\n    }\n  }\n\n  checkDead()\n  {\n    var dead = false;\n    for (let j = 0; j<this.enemys.length;j++)\n    {\n      var enemy = this.enemys[j];\n      if(this.hero.hitTest(enemy.display.getBound()))\n      {\n        dead = true;\n        break;\n      }\n    }\n\n    if(dead)\n    {\n      this.gotoEvalateScene();\n    }\n  }\n\n  gotoEvalateScene()\n  {\n    this.dispose();\n\n    this.gameover = new Sprite(ResourceService.GetAssets(\"gameover\")[0].content);\n    this.stage.AddChild(this.gameover);\n\n    this.scoreText = new Text(this._score.toString(),null,50,60);\n    this.stage.AddChild(this.scoreText);\n    this.scoreText.localPosition = new Vector2(200,360);\n  }\n\n  dispose()\n  {\n    for (let i = 0; i<this.bullets.length;i++)\n    {\n      this.batchBulletContainer.RemoveSprite(this.bullets[i]);\n    }\n    this.bullets = false;\n\n    for (let i = 0; i<this.enemys.length;i++)\n    {\n      this.enemys[i].remove();\n    }\n    this.enemys = false;\n\n    clearInterval(this.updateID);\n\n    this.stage.RemoveChild(this.menuContainer);\n\n    this.stage.RemoveChild(this.background);\n\n    this.stage.RemoveChild(this.batchBulletContainer);\n    this.stage.RemoveChild(this.batchEnemy1Container);\n    this.stage.RemoveChild(this.batchEnemy2Container);\n    this.stage.RemoveChild(this.batchEnemy3Container);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/weFlyGame/logic/Wefly.js","import {Loader} from \"../../mona/loader/Loader.js\";\nimport {EventDefine} from \"../../mona/events/EventDefine.js\";\nimport {Event} from \"../../mona/events/Event.js\";\nimport {ResourceService} from \"./ResourceService.js\";\nimport {GameEventDefine} from \"../logic/GameEventDefine.js\";\n\nclass LoadStruct {\n  constructor(key,path,assetType)\n  {\n    this.key = key;\n    this.path = path;\n    this.assetType = assetType;\n  }\n}\n\nexport class LoaderService {\n\n  constructor()\n  {\n\n  }\n\n  static Init()\n  {\n    LoaderService.loadList = new Array();\n    LoaderService.loader = new Loader();\n    Event.AddEvent(LoaderService,EventDefine.EVENT_LOAD_IMAGE2D_COMPLETE,LoaderService.Loaded);\n  }\n\n  static AddLoad(key,path,assetType)\n  {\n\n    let loadStru = new LoadStruct(key,path,assetType);\n    LoaderService.loadList[LoaderService.loadList.length] = loadStru;\n  }\n\n  static Load()\n  {\n    if(LoaderService.loadList.length <= 0)\n    {\n      console.log(\"LoaderService Load Error\");\n      return;\n    }\n\n\n    LoaderService.loader.LoadImage2D(LoaderService.loadList[0].path,LoaderService.loadList[0].key);\n  }\n\n  static Loaded(loadedArg)\n  {\n    LoaderService.loadList.splice(0,1);\n    ResourceService.AddAsset(loadedArg.customParam,loadedArg.image);\n    if(LoaderService.loadList.length > 0)\n    {\n      LoaderService.Load();\n    }\n    else\n    {\n      Event.Dispatch(GameEventDefine.EVENT_LOAD_COMPLETE);\n    }\n  }\n\n}\nLoaderService.Init();\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/weFlyGame/framework/LoaderService.js","import {Event} from \"../events/Event.js\";\r\nimport {EventDefine} from \"../events/EventDefine.js\";\r\n\r\n//list这些由外部自己管理实现，render引擎不关心\r\nexport class Loader{\r\n\r\n  constructor()\r\n  {\r\n  }\r\n\r\n   LoadImage2D(path,customParam)\r\n  {\r\n\r\n    if(!path)\r\n    {\r\n      console.log(\"LoadImage2D need path\")\r\n      return;\r\n    }\r\n\r\n    var image = new Image();\r\n    //加载纹理\r\n    image.onload = function(){\r\n      //todo 这里可以考虑用event实现，不用函数回调，这样比较方便外部移除监听\r\n      var loadedArg = {};\r\n      loadedArg.image = image;\r\n      loadedArg.id = path;\r\n      loadedArg.customParam = customParam;\r\n      Event.Dispatch(EventDefine.EVENT_LOAD_IMAGE2D_COMPLETE,loadedArg);\r\n    };\r\n\r\n    // 2次幂必须保证，不需要解释撒\r\n    image.src = path;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/loader/Loader.js","import { Quad } from \"./Quad.js\";\nimport { Shader } from \"../shader/Shader.js\";\n\nexport class Sprite extends Quad{\n  constructor(bitmapData,width,height)\n  {\n    super(width,height);\n    this.makeGLTexture(bitmapData);\n    this._shader = new Shader(this.gl,\"/dist/mona/shader/simpleTexture-vext.glsl\",\"/dist/mona/shader/simpleTexture-frag.glsl\",this.onShaderInitComplete.bind(this));\n\n  }\n\n  onShaderInitComplete(shaderProgram)\n  {\n    this._shaderProgram = shaderProgram;\n    this.renderReady = true;\n  }\n\n  // 将文字放在画布中间\n  makeGLTexture(bitmapData) {\n\n      let gl = this.gl;\n      //创建纹理对象\n      var texture = gl.createTexture();\n      //获取u_Sampler的存储位置\n\n      //1.对纹理图像进行Y轴反转\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\n\n      //3.向target绑定纹理对象\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      //4.配置纹理参数\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      //5.配置纹理图像\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, bitmapData);\n\n      this.width = this.width == this.defaultWidth ? bitmapData.width : this.width;\n      this.height = this.height == this.defaultHeight ? bitmapData.height : this.height;\n      this._texture = texture;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/display/Sprite.js","import {Quad} from \"../display/Quad.js\";\nimport {Shader} from \"../shader/Shader.js\";\n\nexport class MovieClip extends Quad{\n  constructor(bitmapDataList,width,height)\n  {\n    super(width,height);\n    this._glTextureList = new Array();\n    this._playIndex = 0;\n    this._autoPlay = false;\n    this.makeGLTexture(bitmapDataList);\n    this.playSpeed = 30;\n    this._statCountDelta = 0;\n    this._shader = new Shader(this.gl,\"/dist/mona/shader/simpleTexture-vext.glsl\",\"/dist/mona/shader/simpleTexture-frag.glsl\",this.onShaderInitComplete.bind(this));\n  }\n\n  onShaderInitComplete(shaderProgram)\n  {\n    this._shaderProgram = shaderProgram;\n    this.renderReady = true;\n  }\n\n  Play()\n  {\n    this._autoPlay = true;\n  }\n\n  Stop()\n  {\n    this._autoPlay = false;\n  }\n\n  Reset()\n  {\n    this._playIndex = 0;\n  }\n\n  // 将文字放在画布中间\n  makeGLTexture(bitmapDataList)\n  {\n\n    let gl = this.gl;\n\n    for (let i = 0; i < bitmapDataList.length; i++)\n    {\n      //创建纹理对象\n      var texture = gl.createTexture();\n      //获取u_Sampler的存储位置\n\n      //1.对纹理图像进行Y轴反转\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\n      //3.向target绑定纹理对象\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      //4.配置纹理参数\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      //5.配置纹理图像\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, bitmapDataList[i].content);\n      this._glTextureList[this._glTextureList.length] = texture;\n    }\n    this.width = this.width == this.defaultWidth ? bitmapDataList[0].content.width : this.width;\n    this.height = this.height == this.defaultHeight ? bitmapDataList[0].content.height : this.height;\n  }\n\n  _vPreRender(deltaTime)\n  {\n\n    if(!this._autoPlay)\n    {\n      this._texture = this._glTextureList[this._playIndex];\n      return;\n    }\n\n    if(this._playIndex >= this._glTextureList.length)\n    {\n      this._playIndex = 0;\n    }\n\n    if(this._playIndex < this._glTextureList.length)\n    {\n      this._texture = this._glTextureList[this._playIndex];\n    }\n\n    if(this._statCountDelta + deltaTime < this.playSpeed)\n    {\n      this._statCountDelta += deltaTime;\n      return;\n    }else {\n      this._statCountDelta = 0;\n    }\n\n    this._playIndex++;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/animation/MovieClip.js","import {DisplayContainer} from \"./DisplayContainer.js\";\r\nimport {VertexData} from \"../utils/VertexData.js\";\r\nimport {Shader} from \"../shader/Shader.js\";\r\nimport {Status} from \"../debug/Status.js\";\r\n\r\n//批量渲染Sprite，只要材质相同，就有合并drawcall的能力，减少cpu到gpu的耗时\r\nexport class BatchSprite extends DisplayContainer{\r\n  constructor(texture,width,height){\r\n    super(width,height);\r\n    this.makeGLTexture(texture);\r\n    this._shader = new Shader(this.gl,\"/dist/mona/shader/simpleTexture-vext.glsl\",\"/dist/mona/shader/simpleTexture-frag.glsl\",this.onShaderInitComplete.bind(this));\r\n  }\r\n\r\n  onShaderInitComplete(shaderProgram)\r\n  {\r\n    this._shaderProgram = shaderProgram;\r\n    this.renderReady = true;\r\n  }\r\n\r\n  AddSprite(sprite)\r\n  {\r\n    //todo 判断是否可以batch\r\n\r\n    this.CheckVertextData();\r\n\r\n    this.AddChild(sprite);\r\n\r\n    sprite.ExpandVertextToBatch();\r\n  }\r\n\r\n\r\n  RemoveSprite(sprite)\r\n  {\r\n    this.CheckVertextData();\r\n\r\n    this.RemoveChild(sprite);\r\n\r\n    this.vertextData.ClearRestBatchVertext(this.Children.length+1);\r\n  }\r\n\r\n\r\n  _vFillVertices()\r\n  {\r\n\r\n    this.CheckVertextData();\r\n\r\n    this.vertextData.SetVertextPosition(0,0,0);\r\n    this.vertextData.SetTextureCoords(0,0,1);\r\n\r\n    this.vertextData.SetVertextPosition(1,0,0);\r\n    this.vertextData.SetTextureCoords(1,0,1);\r\n\r\n    this.vertextData.SetVertextPosition(2,0,this.height);\r\n    this.vertextData.SetTextureCoords(2,0,0);\r\n\r\n    this.vertextData.SetVertextPosition(3,this.width,0);\r\n    this.vertextData.SetTextureCoords(3,1,1);\r\n\r\n    this.vertextData.SetVertextPosition(4,this.width,this.height);\r\n    this.vertextData.SetTextureCoords(4,1,0);\r\n\r\n    this.vertextData.SetVertextPosition(5,this.width,this.height);\r\n    this.vertextData.SetTextureCoords(5,1,0);\r\n  }\r\n\r\n  CheckVertextData()\r\n  {\r\n    if(!this.vertextData)\r\n    {\r\n      this.vertextData = new VertexData(true);\r\n    }\r\n  }\r\n\r\n  Render(deltaTime)\r\n  {\r\n\r\n    if(!this._shaderProgram)\r\n    {\r\n      return;\r\n    }\r\n\r\n    //todo 暂时没有考虑嵌套\r\n    for ( let i = 0; i <this.Children.length; i++){\r\n      this.vertextData.AppendBatchVertices(this.Children[i].vertextData,i,this.Children[i].GetTransformMatrix2Target(this));\r\n    }\r\n\r\n    this._vFillBuffer();\r\n    this._vFillUniform();\r\n    Status.AddDrawCount();\r\n  }\r\n\r\n  // 将文字放在画布中间\r\n  makeGLTexture(bitmapData) {\r\n\r\n    let gl = this.gl;\r\n    //创建纹理对象\r\n    var texture = gl.createTexture();\r\n    //获取u_Sampler的存储位置\r\n\r\n    //1.对纹理图像进行Y轴反转\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\r\n    //3.向target绑定纹理对象\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n    //4.配置纹理参数\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    //5.配置纹理图像\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, bitmapData);\r\n    this.width = this.defaultWidth ;\r\n    this.height = this.defaultHeight;\r\n    this._texture = texture;\r\n  }\r\n\r\n  _vFillBuffer()\r\n  {\r\n\r\n    this._shader.CreateBuffer(this.vertextData.vertices);\r\n\r\n\r\n    var FSIZE = this.vertextData.BYTES_PER_ELEMENT;\r\n    this._shader.SetAttribute(\"a_Position\",FSIZE,0);\r\n    this._shader.SetAttribute(\"a_TextCoord\",FSIZE,2);\r\n\r\n  }\r\n\r\n  //vitual private\r\n  //unifonm参数发生变化\r\n  _vFillUniform()\r\n  {\r\n    super._vFillUniform();\r\n\r\n    let gl = this.gl;\r\n\r\n    this._shader.SetTexture(this._texture,\"u_Sampler\",0);\r\n\r\n    //绘制矩形\r\n    this._shader.Draw(this.vertextData.vertextNum);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/display/BatchSprite.js","import { Quad } from \"../display/Quad.js\";\nimport { Shader } from \"../shader/Shader.js\";\nimport {TextFormat} from \"./TextFormat.js\";\n\nvar textCtx = document.createElement(\"canvas\").getContext(\"2d\");\n\n\nexport class Text extends Quad{\n  constructor(content,textFormat,width,height)\n  {\n    super(width,height);\n\n    this.textFormat = textFormat ? textFormat : new TextFormat();\n    this._content = content;\n    this.makeTextCanvas(100,26);\n\n    this._shader = new Shader(this.gl,\"/dist/mona/shader/text-vext.glsl\",\"/dist/mona/shader/text-frag.glsl\",this.onShaderInitComplete.bind(this));\n  }\n\n  onShaderInitComplete(shaderProgram)\n  {\n    this._shaderProgram = shaderProgram;\n    this.renderReady = true;\n  }\n\n  // 将文字放在画布中间\n  makeTextCanvas(width,height) {\n    textCtx.canvas.width = width;\n    textCtx.canvas.height = height\n    textCtx.font = this.textFormat.font;\n    textCtx.textAlign = this.textFormat.textAlign;\n    textCtx.textBaseline = this.textFormat.textBaseline;\n    textCtx.fillStyle = this.textFormat.fillStyle;\n    textCtx.clearRect(0, 0, width, height);\n    textCtx.fillText(this._content, width/2, height/2);\n    let gl = this.gl;\n    var textTex = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, textTex);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textCtx.canvas);\n    // 确保即使不是 2 的整数次幂也能渲染\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    this._texture = textTex;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/text/Text.js","export class TextFormat{\r\n\r\n  constructor(font,align,baseline,fillStyle)\r\n  {\r\n    this.font = font ? font : \"40px Arial\";\r\n    this.textAlign = align ? align : \"center\";\r\n    this.textBaseline = baseline ? baseline :\"middle\";\r\n    this.fillStyle = fillStyle ? fillStyle : \"black\";\r\n  }\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/mona/text/TextFormat.js"],"sourceRoot":""}